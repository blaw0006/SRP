Tue, 30 Jan 2024 09:22:45 main.py[line:67] INFO Namespace(augmentation='mixup', batch_size=32, cuda=True, dataset_dir='/home/caitlin/blaw_ws/src/ur5_control/src/SRP/src/spectra', filename='main', freeze_base=False, holdout_fold='1', learning_rate=0.0001, loss_type='clip_nll', mode='train', model_type='Transfer_Cnn14', pretrained_checkpoint_path='/home/caitlin/blaw_ws/src/panns_transfer_to_gtzan/workspace/Cnn14_16k_mAP=0.438.pth', resume_iteration=0, stop_iteration=10000, workspace='/home/caitlin/blaw_ws/src/panns_transfer_to_gtzan')
Tue, 30 Jan 2024 09:22:45 main.py[line:72] INFO Using CPU. Set --cuda flag to use GPU.
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1039)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$x2.0', '$const4.1']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$6binary_subscr.2']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$6binary_subscr.2', '$x8.3']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$6binary_subscr.2', '$12binary_subscr.5']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$14compare_op.6']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$x16.7']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$x16.7', '$const18.8']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$20binary_subscr.9']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$28compare_op.13']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:333] DEBUG dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:334] DEBUG stack ['$30binary_and.14']
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:45 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:45 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

Tue, 30 Jan 2024 09:22:46 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1045)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$x2.0', '$const4.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6binary_subscr.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6binary_subscr.2', '$x8.3']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6binary_subscr.2', '$12binary_subscr.5']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$14compare_op.6']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$x16.7']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$x16.7', '$const18.8']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$20binary_subscr.9']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$14compare_op.6', '$28compare_op.13']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$30binary_and.14']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:46 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

Tue, 30 Jan 2024 09:22:46 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1051)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$x4.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const18.8']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:46 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bdbe6b50>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bd01d940>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: y = arg(1, name=y)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bdbe6b50>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const12.5 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: y[slice(None, None, None)] = $6call_function.2
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$const18.8)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:46 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [<numba.core.ir.Assign object at 0x7fb0bcfa31f0>],
             '$14build_slice.7': [<numba.core.ir.Assign object at 0x7fb0bcfa3550>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bcfa38e0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bd01dd90>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fb0bd01d070>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bd005f70>],
             '$const12.5': [<numba.core.ir.Assign object at 0x7fb0bd005790>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bcfa3760>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bcfa33a0>],
             'y': [<numba.core.ir.Assign object at 0x7fb0bcfa34c0>]})
Tue, 30 Jan 2024 09:22:46 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=8, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=80, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$8load_global.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$20call_function_kw.8']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$32build_slice.14']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$44build_slice.20']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$56call_function.25']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$76call_function.35']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: ['$phi80.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=80 nstack_initial=1)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=80, inst=FOR_ITER(arg=8, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi80.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=90 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$out090.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=82 nstack_initial=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$const84.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=80, lineno=7)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:231] DEBUG defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:262] DEBUG keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:46 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcec6070>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: full_shape0 = getattr(value=x, attr=shape)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const24.9.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const28.11.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const30.12.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0[$32build_slice.14.1] = $const24.9.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const36.15.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const40.17.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const42.18.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0[$44build_slice.20.1] = $const36.15.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $48load_global.21.1 = global(range: <class 'range'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $50load_global.22.1 = global(min: <built-in function min>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const52.23.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const54.24.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const62.28.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $66load_global.30.1 = global(max: <built-in function max>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const68.31.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const70.32.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $phi80.0.1 = $78get_iter.36.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 80
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcec6070>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $phi82.1.1 = $80for_iter.2.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: branch $80for_iter.3.1, 82, 92
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 82
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcec6070>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: index00 = $phi82.1.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 90
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 92
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcec6070>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $92return_value.1.1 = cast(value=out0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: return $92return_value.1.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 90
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcec6070>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index = $const4.1 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(int, -1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index.1 = $const10.4 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index.2 = $const18.8 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const24.11 = const(int, 1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index.3 = $const24.11 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $32return_value.15 = cast(value=$30binary_and.14)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0[index00] = $32return_value.15
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 91
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 91
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcec6070>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:46 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [<numba.core.ir.Assign object at 0x7fb0bceac9a0>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7fb0bcea3700>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x7fb0bcf0a370>],
             '$14load_global.5.1': [<numba.core.ir.Assign object at 0x7fb0bceacc40>],
             '$16load_attr.6.1': [<numba.core.ir.Assign object at 0x7fb0bceacdc0>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7fb0bcea3940>],
             '$26binary_subscr.12': [<numba.core.ir.Assign object at 0x7fb0bcea3b80>],
             '$28compare_op.13': [<numba.core.ir.Assign object at 0x7fb0bcf14c10>],
             '$30binary_and.14': [<numba.core.ir.Assign object at 0x7fb0bcf18550>],
             '$32build_slice.13.1': [<numba.core.ir.Assign object at 0x7fb0bceb29d0>],
             '$32build_slice.14.1': [<numba.core.ir.Assign object at 0x7fb0bceb2af0>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7fb0bcf19d90>],
             '$44build_slice.19.1': [<numba.core.ir.Assign object at 0x7fb0bceb5310>],
             '$44build_slice.20.1': [<numba.core.ir.Assign object at 0x7fb0bceb5430>],
             '$48load_global.21.1': [<numba.core.ir.Assign object at 0x7fb0bceb5640>],
             '$50load_global.22.1': [<numba.core.ir.Assign object at 0x7fb0bceb57c0>],
             '$56call_function.25.1': [<numba.core.ir.Assign object at 0x7fb0bceb5c70>],
             '$58unary_negative.26.1': [<numba.core.ir.Assign object at 0x7fb0bceb5dc0>],
             '$64binary_subscr.29.1': [<numba.core.ir.Assign object at 0x7fb0bceb7220>],
             '$66load_global.30.1': [<numba.core.ir.Assign object at 0x7fb0bceb73a0>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fb0bcea34c0>],
             '$72call_function.33.1': [<numba.core.ir.Assign object at 0x7fb0bceb7850>],
             '$74binary_subtract.34.1': [<numba.core.ir.Assign object at 0x7fb0bceb79a0>],
             '$76call_function.35.1': [<numba.core.ir.Assign object at 0x7fb0bceb7b50>],
             '$78get_iter.36.1': [<numba.core.ir.Assign object at 0x7fb0bceb7ca0>],
             '$80for_iter.1.1': [<numba.core.ir.Assign object at 0x7fb0bceb7dc0>],
             '$80for_iter.2.1': [<numba.core.ir.Assign object at 0x7fb0bceb7ee0>],
             '$80for_iter.3.1': [<numba.core.ir.Assign object at 0x7fb0bcebb040>],
             '$8load_global.2.1': [<numba.core.ir.Assign object at 0x7fb0bceac820>],
             '$92return_value.1.1': [<numba.core.ir.Assign object at 0x7fb0bcebb940>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bcf05340>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bcf0bc70>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7fb0bcf10be0>],
             '$const24.9.1': [<numba.core.ir.Assign object at 0x7fb0bceb2400>],
             '$const28.11.1': [<numba.core.ir.Assign object at 0x7fb0bceb26a0>],
             '$const30.12.1': [<numba.core.ir.Assign object at 0x7fb0bceb2820>],
             '$const36.15.1': [<numba.core.ir.Assign object at 0x7fb0bceb2d00>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bcf03100>],
             '$const40.17.1': [<numba.core.ir.Assign object at 0x7fb0bceb2fa0>],
             '$const42.18.1': [<numba.core.ir.Assign object at 0x7fb0bceb5160>],
             '$const52.23.1': [<numba.core.ir.Assign object at 0x7fb0bceb5940>],
             '$const54.24.1': [<numba.core.ir.Assign object at 0x7fb0bceb5ac0>],
             '$const62.28.1': [<numba.core.ir.Assign object at 0x7fb0bceb70a0>],
             '$const68.31.1': [<numba.core.ir.Assign object at 0x7fb0bceb7520>],
             '$const70.32.1': [<numba.core.ir.Assign object at 0x7fb0bceb76a0>],
             '$phi80.0.1': [<numba.core.ir.Assign object at 0x7fb0bceb2520>],
             '$phi82.1.1': [<numba.core.ir.Assign object at 0x7fb0bceac1f0>],
             'full_shape0': [<numba.core.ir.Assign object at 0x7fb0bceac580>],
             'index00': [<numba.core.ir.Assign object at 0x7fb0bcebb2e0>],
             'out0': [<numba.core.ir.Assign object at 0x7fb0bceb22b0>],
             'stencil_index': [<numba.core.ir.Assign object at 0x7fb0bcea3430>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x7fb0bcea3670>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x7fb0bcea38b0>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x7fb0bcea3af0>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bceac2e0>]})
Tue, 30 Jan 2024 09:22:46 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4369)
           2	LOAD_GLOBAL(arg=0, lineno=4370)
           4	LOAD_FAST(arg=0, lineno=4370)
           6	LOAD_FAST(arg=1, lineno=4370)
           8	LOAD_DEREF(arg=0, lineno=4370)
          10	CALL_FUNCTION(arg=3, lineno=4370)
          12	RETURN_VALUE(arg=None, lineno=4370)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4369)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4370)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4370)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4370)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$shape4.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4370)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4370)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4370)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10call_function.4']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:46 interpreter.py[line:1390] DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(bool, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4369), Var(dtype, arrayobj.py:4369), Var($8load_deref.3, arrayobj.py:4370)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcec6100>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: shape = arg(0, name=shape)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: dtype = arg(1, name=dtype)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $8load_deref.3 = freevar(retty: array(bool, 1d, C))
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4369), Var(dtype, arrayobj.py:4369), Var($8load_deref.3, arrayobj.py:4370)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: return $12return_value.5
Tue, 30 Jan 2024 09:22:46 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7fb0bce78100>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fb0bce78250>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bce73b50>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x7fb0bce73f10>],
             'dtype': [<numba.core.ir.Assign object at 0x7fb0bce739d0>],
             'shape': [<numba.core.ir.Assign object at 0x7fb0bce73160>]})
Tue, 30 Jan 2024 09:22:46 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4245)
           2	LOAD_FAST(arg=0, lineno=4248)
           4	LOAD_METHOD(arg=0, lineno=4248)
           6	LOAD_FAST(arg=1, lineno=4248)
           8	LOAD_FAST(arg=2, lineno=4248)
          10	CALL_METHOD(arg=2, lineno=4248)
          12	RETURN_VALUE(arg=None, lineno=4248)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4245)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4248)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=4248)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$arrtype2.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4248)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$4load_method.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=4248)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$4load_method.1', '$size6.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=4248)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$4load_method.1', '$size6.2', '$align8.3']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4248)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10call_method.4']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:46 interpreter.py[line:1390] DEBUG label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4245), Var(align, arrayobj.py:4245)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb79a0>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: arrtype = arg(0, name=arrtype)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: size = arg(1, name=size)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: align = arg(2, name=align)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4245), Var(align, arrayobj.py:4245)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $12return_value.5 = cast(value=$10call_method.4)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: return $12return_value.5
Tue, 30 Jan 2024 09:22:46 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fb0bce9dee0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fb0bce26070>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fb0bce9daf0>],
             'align': [<numba.core.ir.Assign object at 0x7fb0bce9d850>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fb0bce9d610>],
             'size': [<numba.core.ir.Assign object at 0x7fb0bce9d730>]})
Tue, 30 Jan 2024 09:22:46 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4240)
           2	LOAD_GLOBAL(arg=0, lineno=4241)
           4	LOAD_FAST(arg=1, lineno=4241)
           6	LOAD_FAST(arg=2, lineno=4241)
           8	CALL_FUNCTION(arg=2, lineno=4241)
          10	RETURN_VALUE(arg=None, lineno=4241)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4240)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4241)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=4241)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=4241)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$allocsize4.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=4241)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=4241)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$8call_function.3']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:46 interpreter.py[line:1390] DEBUG label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4240), Var(align, arrayobj.py:4240)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bce92550>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: cls = arg(0, name=cls)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: allocsize = arg(1, name=allocsize)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: align = arg(2, name=align)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4240), Var(align, arrayobj.py:4240)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $10return_value.4 = cast(value=$8call_function.3)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: return $10return_value.4
Tue, 30 Jan 2024 09:22:46 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fb0bcdc7190>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bcdbbc10>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fb0bcdc7040>],
             'align': [<numba.core.ir.Assign object at 0x7fb0bcdbba90>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fb0bcdbb970>],
             'cls': [<numba.core.ir.Assign object at 0x7fb0bce269a0>]})
Tue, 30 Jan 2024 09:22:46 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1051)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$x4.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const18.8']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:46 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bdbe6b50>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcbdb1c0>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: y = arg(1, name=y)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bdbe6b50>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const12.5 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: y[slice(None, None, None)] = $6call_function.2
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$const18.8)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:46 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [<numba.core.ir.Assign object at 0x7fb0bcbd60a0>],
             '$14build_slice.7': [<numba.core.ir.Assign object at 0x7fb0bcbd61c0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bcbd6550>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bcbdb7f0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fb0bcbdbac0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bcbdbd30>],
             '$const12.5': [<numba.core.ir.Assign object at 0x7fb0bcbdbeb0>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bcbd63d0>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bcbdb550>],
             'y': [<numba.core.ir.Assign object at 0x7fb0bcbdb670>]})
Tue, 30 Jan 2024 09:22:46 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=8, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=80, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$8load_global.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$20call_function_kw.8']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$32build_slice.14']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$44build_slice.20']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$56call_function.25']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$76call_function.35']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: ['$phi80.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=80 nstack_initial=1)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=80, inst=FOR_ITER(arg=8, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi80.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=90 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$out090.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=82 nstack_initial=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$const84.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=80, lineno=7)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:231] DEBUG defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:262] DEBUG keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:46 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcb337f0>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: full_shape0 = getattr(value=x, attr=shape)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const24.9.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const28.11.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const30.12.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0[$32build_slice.14.1] = $const24.9.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const36.15.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const40.17.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const42.18.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0[$44build_slice.20.1] = $const36.15.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $48load_global.21.1 = global(range: <class 'range'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $50load_global.22.1 = global(min: <built-in function min>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const52.23.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const54.24.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const62.28.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $66load_global.30.1 = global(max: <built-in function max>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const68.31.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const70.32.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $phi80.0.1 = $78get_iter.36.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 80
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcb337f0>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $phi82.1.1 = $80for_iter.2.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: branch $80for_iter.3.1, 82, 92
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 82
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcb337f0>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: index00 = $phi82.1.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 90
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 92
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcb337f0>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $92return_value.1.1 = cast(value=out0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: return $92return_value.1.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 90
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcb337f0>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index = $const4.1 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(int, -1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index.1 = $const10.4 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index.2 = $const18.8 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const24.11 = const(int, 1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index.3 = $const24.11 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $32return_value.15 = cast(value=$30binary_and.14)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0[index00] = $32return_value.15
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 91
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 91
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcb337f0>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:46 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [<numba.core.ir.Assign object at 0x7fb0bcb99220>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7fb0bcb8df40>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x7fb0bcb77bb0>],
             '$14load_global.5.1': [<numba.core.ir.Assign object at 0x7fb0bcb994c0>],
             '$16load_attr.6.1': [<numba.core.ir.Assign object at 0x7fb0bcb99640>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7fb0bcb8f1c0>],
             '$26binary_subscr.12': [<numba.core.ir.Assign object at 0x7fb0bcb8f400>],
             '$28compare_op.13': [<numba.core.ir.Assign object at 0x7fb0bcb83490>],
             '$30binary_and.14': [<numba.core.ir.Assign object at 0x7fb0bcb84d90>],
             '$32build_slice.13.1': [<numba.core.ir.Assign object at 0x7fb0bcb9b250>],
             '$32build_slice.14.1': [<numba.core.ir.Assign object at 0x7fb0bcb9b370>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7fb0bcb87610>],
             '$44build_slice.19.1': [<numba.core.ir.Assign object at 0x7fb0bcb9bb50>],
             '$44build_slice.20.1': [<numba.core.ir.Assign object at 0x7fb0bcb9bc70>],
             '$48load_global.21.1': [<numba.core.ir.Assign object at 0x7fb0bcb9be80>],
             '$50load_global.22.1': [<numba.core.ir.Assign object at 0x7fb0bcb9c040>],
             '$56call_function.25.1': [<numba.core.ir.Assign object at 0x7fb0bcb9c4f0>],
             '$58unary_negative.26.1': [<numba.core.ir.Assign object at 0x7fb0bcb9c640>],
             '$64binary_subscr.29.1': [<numba.core.ir.Assign object at 0x7fb0bcb9ca60>],
             '$66load_global.30.1': [<numba.core.ir.Assign object at 0x7fb0bcb9cbe0>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fb0bcb8dd00>],
             '$72call_function.33.1': [<numba.core.ir.Assign object at 0x7fb0bcb9e0d0>],
             '$74binary_subtract.34.1': [<numba.core.ir.Assign object at 0x7fb0bcb9e220>],
             '$76call_function.35.1': [<numba.core.ir.Assign object at 0x7fb0bcb9e3d0>],
             '$78get_iter.36.1': [<numba.core.ir.Assign object at 0x7fb0bcb9e520>],
             '$80for_iter.1.1': [<numba.core.ir.Assign object at 0x7fb0bcb9e640>],
             '$80for_iter.2.1': [<numba.core.ir.Assign object at 0x7fb0bcb9e760>],
             '$80for_iter.3.1': [<numba.core.ir.Assign object at 0x7fb0bcb9e880>],
             '$8load_global.2.1': [<numba.core.ir.Assign object at 0x7fb0bcb990a0>],
             '$92return_value.1.1': [<numba.core.ir.Assign object at 0x7fb0bcb201c0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bcb73b80>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bcb7a4f0>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7fb0bcb7f460>],
             '$const24.9.1': [<numba.core.ir.Assign object at 0x7fb0bcb99c40>],
             '$const28.11.1': [<numba.core.ir.Assign object at 0x7fb0bcb99ee0>],
             '$const30.12.1': [<numba.core.ir.Assign object at 0x7fb0bcb9b0a0>],
             '$const36.15.1': [<numba.core.ir.Assign object at 0x7fb0bcb9b580>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bcb6ea30>],
             '$const40.17.1': [<numba.core.ir.Assign object at 0x7fb0bcb9b820>],
             '$const42.18.1': [<numba.core.ir.Assign object at 0x7fb0bcb9b9a0>],
             '$const52.23.1': [<numba.core.ir.Assign object at 0x7fb0bcb9c1c0>],
             '$const54.24.1': [<numba.core.ir.Assign object at 0x7fb0bcb9c340>],
             '$const62.28.1': [<numba.core.ir.Assign object at 0x7fb0bcb9c8e0>],
             '$const68.31.1': [<numba.core.ir.Assign object at 0x7fb0bcb9cd60>],
             '$const70.32.1': [<numba.core.ir.Assign object at 0x7fb0bcb9cee0>],
             '$phi80.0.1': [<numba.core.ir.Assign object at 0x7fb0bcb99820>],
             '$phi82.1.1': [<numba.core.ir.Assign object at 0x7fb0bcb8fa90>],
             'full_shape0': [<numba.core.ir.Assign object at 0x7fb0bcb8fdf0>],
             'index00': [<numba.core.ir.Assign object at 0x7fb0bcb9eb20>],
             'out0': [<numba.core.ir.Assign object at 0x7fb0bcb99af0>],
             'stencil_index': [<numba.core.ir.Assign object at 0x7fb0bcb8dc70>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x7fb0bcb8deb0>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x7fb0bcb8f130>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x7fb0bcb8f370>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bcb8fb80>]})
Tue, 30 Jan 2024 09:22:46 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1051)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$x4.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const18.8']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:46 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bdbe6b50>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc9f58e0>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: y = arg(1, name=y)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bdbe6b50>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const12.5 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: y[slice(None, None, None)] = $6call_function.2
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$const18.8)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:46 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [<numba.core.ir.Assign object at 0x7fb0bca56cd0>],
             '$14build_slice.7': [<numba.core.ir.Assign object at 0x7fb0bca56df0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bc9ec1c0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bca56460>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fb0bca56730>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bca569a0>],
             '$const12.5': [<numba.core.ir.Assign object at 0x7fb0bca56b20>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc9ec040>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc9f5ac0>],
             'y': [<numba.core.ir.Assign object at 0x7fb0bc9f5b20>]})
Tue, 30 Jan 2024 09:22:46 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=8, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=80, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$8load_global.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$20call_function_kw.8']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$32build_slice.14']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$44build_slice.20']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$56call_function.25']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$76call_function.35']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: ['$phi80.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=80 nstack_initial=1)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=80, inst=FOR_ITER(arg=8, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi80.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=90 nstack_initial=0)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$out090.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:105] DEBUG stack: ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=82 nstack_initial=2)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$const84.2']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:333] DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=80, lineno=7)
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:231] DEBUG defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:262] DEBUG keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
Tue, 30 Jan 2024 09:22:46 byteflow.py[line:136] DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:46 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98ef40>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: full_shape0 = getattr(value=x, attr=shape)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const24.9.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const28.11.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const30.12.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0[$32build_slice.14.1] = $const24.9.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const36.15.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const40.17.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const42.18.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0[$44build_slice.20.1] = $const36.15.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $48load_global.21.1 = global(range: <class 'range'>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $50load_global.22.1 = global(min: <built-in function min>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const52.23.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const54.24.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const62.28.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $66load_global.30.1 = global(max: <built-in function max>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const68.31.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const70.32.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $phi80.0.1 = $78get_iter.36.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 80
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98ef40>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $phi82.1.1 = $80for_iter.2.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: branch $80for_iter.3.1, 82, 92
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 82
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98ef40>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: index00 = $phi82.1.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 90
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 92
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98ef40>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $92return_value.1.1 = cast(value=out0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: return $92return_value.1.1
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 90
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98ef40>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index = $const4.1 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(int, -1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index.1 = $const10.4 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(int, 0)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index.2 = $const18.8 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $const24.11 = const(int, 1)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: stencil_index.3 = $const24.11 + index00
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: $32return_value.15 = cast(value=$30binary_and.14)
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: out0[index00] = $32return_value.15
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 91
Tue, 30 Jan 2024 09:22:46 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 91
Tue, 30 Jan 2024 09:22:46 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98ef40>
Tue, 30 Jan 2024 09:22:46 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:46 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [<numba.core.ir.Assign object at 0x7fb0bc974e80>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7fb0bc973b80>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x7fb0bca3e7f0>],
             '$14load_global.5.1': [<numba.core.ir.Assign object at 0x7fb0bc981100>],
             '$16load_attr.6.1': [<numba.core.ir.Assign object at 0x7fb0bc981280>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7fb0bc973dc0>],
             '$26binary_subscr.12': [<numba.core.ir.Assign object at 0x7fb0bc974040>],
             '$28compare_op.13': [<numba.core.ir.Assign object at 0x7fb0bc9670d0>],
             '$30binary_and.14': [<numba.core.ir.Assign object at 0x7fb0bc96a9d0>],
             '$32build_slice.13.1': [<numba.core.ir.Assign object at 0x7fb0bc981e50>],
             '$32build_slice.14.1': [<numba.core.ir.Assign object at 0x7fb0bc981f70>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7fb0bc96d250>],
             '$44build_slice.19.1': [<numba.core.ir.Assign object at 0x7fb0bc983790>],
             '$44build_slice.20.1': [<numba.core.ir.Assign object at 0x7fb0bc9838b0>],
             '$48load_global.21.1': [<numba.core.ir.Assign object at 0x7fb0bc983ac0>],
             '$50load_global.22.1': [<numba.core.ir.Assign object at 0x7fb0bc983c40>],
             '$56call_function.25.1': [<numba.core.ir.Assign object at 0x7fb0bc984130>],
             '$58unary_negative.26.1': [<numba.core.ir.Assign object at 0x7fb0bc984280>],
             '$64binary_subscr.29.1': [<numba.core.ir.Assign object at 0x7fb0bc9846a0>],
             '$66load_global.30.1': [<numba.core.ir.Assign object at 0x7fb0bc984820>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fb0bc973940>],
             '$72call_function.33.1': [<numba.core.ir.Assign object at 0x7fb0bc984cd0>],
             '$74binary_subtract.34.1': [<numba.core.ir.Assign object at 0x7fb0bc984e20>],
             '$76call_function.35.1': [<numba.core.ir.Assign object at 0x7fb0bc984fd0>],
             '$78get_iter.36.1': [<numba.core.ir.Assign object at 0x7fb0bc986160>],
             '$80for_iter.1.1': [<numba.core.ir.Assign object at 0x7fb0bc986280>],
             '$80for_iter.2.1': [<numba.core.ir.Assign object at 0x7fb0bc9863a0>],
             '$80for_iter.3.1': [<numba.core.ir.Assign object at 0x7fb0bc9864c0>],
             '$8load_global.2.1': [<numba.core.ir.Assign object at 0x7fb0bc974d00>],
             '$92return_value.1.1': [<numba.core.ir.Assign object at 0x7fb0bc986dc0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bca407c0>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc95f130>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7fb0bc9630a0>],
             '$const24.9.1': [<numba.core.ir.Assign object at 0x7fb0bc981880>],
             '$const28.11.1': [<numba.core.ir.Assign object at 0x7fb0bc981b20>],
             '$const30.12.1': [<numba.core.ir.Assign object at 0x7fb0bc981ca0>],
             '$const36.15.1': [<numba.core.ir.Assign object at 0x7fb0bc9831c0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bca52670>],
             '$const40.17.1': [<numba.core.ir.Assign object at 0x7fb0bc983460>],
             '$const42.18.1': [<numba.core.ir.Assign object at 0x7fb0bc9835e0>],
             '$const52.23.1': [<numba.core.ir.Assign object at 0x7fb0bc983dc0>],
             '$const54.24.1': [<numba.core.ir.Assign object at 0x7fb0bc983f40>],
             '$const62.28.1': [<numba.core.ir.Assign object at 0x7fb0bc984520>],
             '$const68.31.1': [<numba.core.ir.Assign object at 0x7fb0bc9849a0>],
             '$const70.32.1': [<numba.core.ir.Assign object at 0x7fb0bc984b20>],
             '$phi80.0.1': [<numba.core.ir.Assign object at 0x7fb0bc9819a0>],
             '$phi82.1.1': [<numba.core.ir.Assign object at 0x7fb0bc9746d0>],
             'full_shape0': [<numba.core.ir.Assign object at 0x7fb0bc974a30>],
             'index00': [<numba.core.ir.Assign object at 0x7fb0bc986760>],
             'out0': [<numba.core.ir.Assign object at 0x7fb0bc981730>],
             'stencil_index': [<numba.core.ir.Assign object at 0x7fb0bc9738b0>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x7fb0bc973af0>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x7fb0bc973d30>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x7fb0bc973f70>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc9747c0>]})
Tue, 30 Jan 2024 09:22:46 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1051)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$x4.1']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const18.8']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:47 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bdbe6b50>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc77bbb0>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: y = arg(1, name=y)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bdbe6b50>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const12.5 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: y[slice(None, None, None)] = $6call_function.2
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$const18.8)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:47 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [<numba.core.ir.Assign object at 0x7fb0bc78aee0>],
             '$14build_slice.7': [<numba.core.ir.Assign object at 0x7fb0bca5b730>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bc77b280>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bc78a670>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fb0bc78a940>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bc78abb0>],
             '$const12.5': [<numba.core.ir.Assign object at 0x7fb0bc78ad30>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc77b370>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc77bac0>],
             'y': [<numba.core.ir.Assign object at 0x7fb0bc78a4f0>]})
Tue, 30 Jan 2024 09:22:47 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=8, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=80, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$8load_global.2']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$10load_attr.3']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$20call_function_kw.8']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const24.9']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$32build_slice.14']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const36.15']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$44build_slice.20']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$56call_function.25']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$76call_function.35']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:105] DEBUG stack: ['$phi80.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=80 nstack_initial=1)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=80, inst=FOR_ITER(arg=8, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$phi80.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=90 nstack_initial=0)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$out090.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:105] DEBUG stack: ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=82 nstack_initial=2)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$const84.2']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=80, lineno=7)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:231] DEBUG defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:262] DEBUG keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:136] DEBUG block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:136] DEBUG block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:136] DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:47 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc775730>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: full_shape0 = getattr(value=x, attr=shape)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const24.9.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const28.11.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const30.12.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: out0[$32build_slice.14.1] = $const24.9.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const36.15.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const40.17.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const42.18.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: out0[$44build_slice.20.1] = $const36.15.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $48load_global.21.1 = global(range: <class 'range'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $50load_global.22.1 = global(min: <built-in function min>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const52.23.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const54.24.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const62.28.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $66load_global.30.1 = global(max: <built-in function max>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const68.31.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const70.32.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $phi80.0.1 = $78get_iter.36.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 80
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc775730>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $phi82.1.1 = $80for_iter.2.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: branch $80for_iter.3.1, 82, 92
Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 82
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc775730>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: index00 = $phi82.1.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: jump 90
Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 92
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc775730>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $92return_value.1.1 = cast(value=out0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: return $92return_value.1.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 90
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc775730>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: stencil_index = $const4.1 + index00
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(int, -1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: stencil_index.1 = $const10.4 + index00
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: stencil_index.2 = $const18.8 + index00
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const24.11 = const(int, 1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: stencil_index.3 = $const24.11 + index00
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $32return_value.15 = cast(value=$30binary_and.14)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: out0[index00] = $32return_value.15
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: jump 91
Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 91
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc775730>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:47 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [<numba.core.ir.Assign object at 0x7fb0bc7702b0>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7fb0bc850fd0>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x7fb0bc7d6370>],
             '$14load_global.5.1': [<numba.core.ir.Assign object at 0x7fb0bc770550>],
             '$16load_attr.6.1': [<numba.core.ir.Assign object at 0x7fb0bc7706d0>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7fb0bc787250>],
             '$26binary_subscr.12': [<numba.core.ir.Assign object at 0x7fb0bc787490>],
             '$28compare_op.13': [<numba.core.ir.Assign object at 0x7fb0bc84f9a0>],
             '$30binary_and.14': [<numba.core.ir.Assign object at 0x7fb0bc854d30>],
             '$32build_slice.13.1': [<numba.core.ir.Assign object at 0x7fb0bc76f2e0>],
             '$32build_slice.14.1': [<numba.core.ir.Assign object at 0x7fb0bc76f400>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7fb0bc854e50>],
             '$44build_slice.19.1': [<numba.core.ir.Assign object at 0x7fb0bc76fbe0>],
             '$44build_slice.20.1': [<numba.core.ir.Assign object at 0x7fb0bc76fd00>],
             '$48load_global.21.1': [<numba.core.ir.Assign object at 0x7fb0bc76ff10>],
             '$50load_global.22.1': [<numba.core.ir.Assign object at 0x7fb0bc7690d0>],
             '$56call_function.25.1': [<numba.core.ir.Assign object at 0x7fb0bc769580>],
             '$58unary_negative.26.1': [<numba.core.ir.Assign object at 0x7fb0bc7696d0>],
             '$64binary_subscr.29.1': [<numba.core.ir.Assign object at 0x7fb0bc769af0>],
             '$66load_global.30.1': [<numba.core.ir.Assign object at 0x7fb0bc769c70>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fb0bc84e130>],
             '$72call_function.33.1': [<numba.core.ir.Assign object at 0x7fb0bc76b160>],
             '$74binary_subtract.34.1': [<numba.core.ir.Assign object at 0x7fb0bc76b2b0>],
             '$76call_function.35.1': [<numba.core.ir.Assign object at 0x7fb0bc76b460>],
             '$78get_iter.36.1': [<numba.core.ir.Assign object at 0x7fb0bc76b5b0>],
             '$80for_iter.1.1': [<numba.core.ir.Assign object at 0x7fb0bc76b6d0>],
             '$80for_iter.2.1': [<numba.core.ir.Assign object at 0x7fb0bc76b7f0>],
             '$80for_iter.3.1': [<numba.core.ir.Assign object at 0x7fb0bc76b910>],
             '$8load_global.2.1': [<numba.core.ir.Assign object at 0x7fb0bc770130>],
             '$92return_value.1.1': [<numba.core.ir.Assign object at 0x7fb0bc765250>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bc7e2340>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc85ac70>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7fb0bc84f4f0>],
             '$const24.9.1': [<numba.core.ir.Assign object at 0x7fb0bc770cd0>],
             '$const28.11.1': [<numba.core.ir.Assign object at 0x7fb0bc770f70>],
             '$const30.12.1': [<numba.core.ir.Assign object at 0x7fb0bc76f130>],
             '$const36.15.1': [<numba.core.ir.Assign object at 0x7fb0bc76f610>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bc838b50>],
             '$const40.17.1': [<numba.core.ir.Assign object at 0x7fb0bc76f8b0>],
             '$const42.18.1': [<numba.core.ir.Assign object at 0x7fb0bc76fa30>],
             '$const52.23.1': [<numba.core.ir.Assign object at 0x7fb0bc769250>],
             '$const54.24.1': [<numba.core.ir.Assign object at 0x7fb0bc7693d0>],
             '$const62.28.1': [<numba.core.ir.Assign object at 0x7fb0bc769970>],
             '$const68.31.1': [<numba.core.ir.Assign object at 0x7fb0bc769df0>],
             '$const70.32.1': [<numba.core.ir.Assign object at 0x7fb0bc769f70>],
             '$phi80.0.1': [<numba.core.ir.Assign object at 0x7fb0bc7708b0>],
             '$phi82.1.1': [<numba.core.ir.Assign object at 0x7fb0bc787b20>],
             'full_shape0': [<numba.core.ir.Assign object at 0x7fb0bc787e80>],
             'index00': [<numba.core.ir.Assign object at 0x7fb0bc76bbb0>],
             'out0': [<numba.core.ir.Assign object at 0x7fb0bc770b80>],
             'stencil_index': [<numba.core.ir.Assign object at 0x7fb0bc855190>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x7fb0bc850f40>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x7fb0bc7871c0>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x7fb0bc787400>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc787c10>]})
Tue, 30 Jan 2024 09:22:47 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1051)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$x4.1']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const18.8']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:47 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bdbe6b50>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc8468e0>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: y = arg(1, name=y)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bdbe6b50>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const12.5 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: y[slice(None, None, None)] = $6call_function.2
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$const18.8)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:47 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [<numba.core.ir.Assign object at 0x7fb0bc568220>],
             '$14build_slice.7': [<numba.core.ir.Assign object at 0x7fb0bc568340>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bc5686d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bc56a970>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fb0bc56ac40>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bc56aeb0>],
             '$const12.5': [<numba.core.ir.Assign object at 0x7fb0bc568070>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc568550>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc56a250>],
             'y': [<numba.core.ir.Assign object at 0x7fb0bc56a070>]})
Tue, 30 Jan 2024 09:22:47 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=8, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=80, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$8load_global.2']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$10load_attr.3']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$20call_function_kw.8']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const24.9']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$32build_slice.14']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const36.15']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$44build_slice.20']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$56call_function.25']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$76call_function.35']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:105] DEBUG stack: ['$phi80.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=80 nstack_initial=1)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=80, inst=FOR_ITER(arg=8, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$phi80.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=90 nstack_initial=0)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$out090.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:105] DEBUG stack: ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=82 nstack_initial=2)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$const84.2']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:333] DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=80, lineno=7)
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:231] DEBUG defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:262] DEBUG keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:136] DEBUG block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:136] DEBUG block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
Tue, 30 Jan 2024 09:22:47 byteflow.py[line:136] DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:47 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5d22e0>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: full_shape0 = getattr(value=x, attr=shape)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const24.9.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const28.11.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const30.12.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: out0[$32build_slice.14.1] = $const24.9.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const36.15.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const40.17.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const42.18.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: out0[$44build_slice.20.1] = $const36.15.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $48load_global.21.1 = global(range: <class 'range'>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $50load_global.22.1 = global(min: <built-in function min>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const52.23.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const54.24.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const62.28.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $66load_global.30.1 = global(max: <built-in function max>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const68.31.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const70.32.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $phi80.0.1 = $78get_iter.36.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 80
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5d22e0>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $phi82.1.1 = $80for_iter.2.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: branch $80for_iter.3.1, 82, 92
Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 82
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5d22e0>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: index00 = $phi82.1.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: jump 90
Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 92
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5d22e0>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $92return_value.1.1 = cast(value=out0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: return $92return_value.1.1
Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 90
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5d22e0>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: stencil_index = $const4.1 + index00
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(int, -1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: stencil_index.1 = $const10.4 + index00
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(int, 0)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: stencil_index.2 = $const18.8 + index00
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $const24.11 = const(int, 1)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: stencil_index.3 = $const24.11 + index00
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: $32return_value.15 = cast(value=$30binary_and.14)
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: out0[index00] = $32return_value.15
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: jump 91
Tue, 30 Jan 2024 09:22:47 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 91
Tue, 30 Jan 2024 09:22:47 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5d22e0>
Tue, 30 Jan 2024 09:22:47 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:47 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [<numba.core.ir.Assign object at 0x7fb0bc5c80a0>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7fb0bc5c2100>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x7fb0bc57dee0>],
             '$14load_global.5.1': [<numba.core.ir.Assign object at 0x7fb0bc857400>],
             '$16load_attr.6.1': [<numba.core.ir.Assign object at 0x7fb0bc5fbdf0>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7fb0bc5c2bb0>],
             '$26binary_subscr.12': [<numba.core.ir.Assign object at 0x7fb0bc5c2610>],
             '$28compare_op.13': [<numba.core.ir.Assign object at 0x7fb0bc586af0>],
             '$30binary_and.14': [<numba.core.ir.Assign object at 0x7fb0bc589040>],
             '$32build_slice.13.1': [<numba.core.ir.Assign object at 0x7fb0bc5bf940>],
             '$32build_slice.14.1': [<numba.core.ir.Assign object at 0x7fb0bc5bfa60>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7fb0bc58bbe0>],
             '$44build_slice.19.1': [<numba.core.ir.Assign object at 0x7fb0bc591610>],
             '$44build_slice.20.1': [<numba.core.ir.Assign object at 0x7fb0bc591730>],
             '$48load_global.21.1': [<numba.core.ir.Assign object at 0x7fb0bc591940>],
             '$50load_global.22.1': [<numba.core.ir.Assign object at 0x7fb0bc591ac0>],
             '$56call_function.25.1': [<numba.core.ir.Assign object at 0x7fb0bc591fd0>],
             '$58unary_negative.26.1': [<numba.core.ir.Assign object at 0x7fb0bc5d0100>],
             '$64binary_subscr.29.1': [<numba.core.ir.Assign object at 0x7fb0bc5d0520>],
             '$66load_global.30.1': [<numba.core.ir.Assign object at 0x7fb0bc5d06a0>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fb0bc58ea30>],
             '$72call_function.33.1': [<numba.core.ir.Assign object at 0x7fb0bc5d0b50>],
             '$74binary_subtract.34.1': [<numba.core.ir.Assign object at 0x7fb0bc5d0ca0>],
             '$76call_function.35.1': [<numba.core.ir.Assign object at 0x7fb0bc5d0e50>],
             '$78get_iter.36.1': [<numba.core.ir.Assign object at 0x7fb0bc5d0fa0>],
             '$80for_iter.1.1': [<numba.core.ir.Assign object at 0x7fb0bc5d3100>],
             '$80for_iter.2.1': [<numba.core.ir.Assign object at 0x7fb0bc5d3220>],
             '$80for_iter.3.1': [<numba.core.ir.Assign object at 0x7fb0bc5d3340>],
             '$8load_global.2.1': [<numba.core.ir.Assign object at 0x7fb0bc5c8160>],
             '$92return_value.1.1': [<numba.core.ir.Assign object at 0x7fb0bc5d3c40>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bc57a6d0>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc580130>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7fb0bc582b50>],
             '$const24.9.1': [<numba.core.ir.Assign object at 0x7fb0bc5bfee0>],
             '$const28.11.1': [<numba.core.ir.Assign object at 0x7fb0bc5bf610>],
             '$const30.12.1': [<numba.core.ir.Assign object at 0x7fb0bc5bf790>],
             '$const36.15.1': [<numba.core.ir.Assign object at 0x7fb0bc5bfc40>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bc5dadf0>],
             '$const40.17.1': [<numba.core.ir.Assign object at 0x7fb0bc5bf1f0>],
             '$const42.18.1': [<numba.core.ir.Assign object at 0x7fb0bc591460>],
             '$const52.23.1': [<numba.core.ir.Assign object at 0x7fb0bc591c70>],
             '$const54.24.1': [<numba.core.ir.Assign object at 0x7fb0bc591e20>],
             '$const62.28.1': [<numba.core.ir.Assign object at 0x7fb0bc5d03a0>],
             '$const68.31.1': [<numba.core.ir.Assign object at 0x7fb0bc5d0820>],
             '$const70.32.1': [<numba.core.ir.Assign object at 0x7fb0bc5d09a0>],
             '$phi80.0.1': [<numba.core.ir.Assign object at 0x7fb0bc5bf4f0>],
             '$phi82.1.1': [<numba.core.ir.Assign object at 0x7fb0bc5c8820>],
             'full_shape0': [<numba.core.ir.Assign object at 0x7fb0bc5c88e0>],
             'index00': [<numba.core.ir.Assign object at 0x7fb0bc5d35e0>],
             'out0': [<numba.core.ir.Assign object at 0x7fb0bc5bffd0>],
             'stencil_index': [<numba.core.ir.Assign object at 0x7fb0bc58eb20>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x7fb0bc5c2040>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x7fb0bc5c2700>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x7fb0bc5c2430>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc5c8880>]})
Tue, 30 Jan 2024 09:22:47 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1068)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$x4.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const18.8']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:48 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bcffff70>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc59db80>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: y = arg(1, name=y)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bcffff70>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const12.5 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: y[slice(None, None, None)] = $6call_function.2
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$const18.8)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:48 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [<numba.core.ir.Assign object at 0x7fb0bc59d2e0>],
             '$14build_slice.7': [<numba.core.ir.Assign object at 0x7fb0bc326eb0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bc57a9a0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bc456c40>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fb0bc456550>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bc59d610>],
             '$const12.5': [<numba.core.ir.Assign object at 0x7fb0bc59d730>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc57ab20>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc456340>],
             'y': [<numba.core.ir.Assign object at 0x7fb0bc456a90>]})
Tue, 30 Jan 2024 09:22:48 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=8, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=80, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$8load_global.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$20call_function_kw.8']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$32build_slice.14']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$44build_slice.20']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$56call_function.25']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$76call_function.35']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: ['$phi80.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=80 nstack_initial=1)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=80, inst=FOR_ITER(arg=8, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi80.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=90 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$out090.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=82 nstack_initial=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$const84.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=80, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:231] DEBUG defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:262] DEBUG keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:48 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98e610>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: full_shape0 = getattr(value=x, attr=shape)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const24.9.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const28.11.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const30.12.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0[$32build_slice.14.1] = $const24.9.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const36.15.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const40.17.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const42.18.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0[$44build_slice.20.1] = $const36.15.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $48load_global.21.1 = global(range: <class 'range'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $50load_global.22.1 = global(min: <built-in function min>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const52.23.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const54.24.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const62.28.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $66load_global.30.1 = global(max: <built-in function max>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const68.31.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const70.32.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $phi80.0.1 = $78get_iter.36.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 80
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98e610>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $phi82.1.1 = $80for_iter.2.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: branch $80for_iter.3.1, 82, 92
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 82
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98e610>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: index00 = $phi82.1.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 90
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 92
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98e610>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $92return_value.1.1 = cast(value=out0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: return $92return_value.1.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 90
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98e610>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index = $const4.1 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(int, -1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index.1 = $const10.4 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index.2 = $const18.8 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const24.11 = const(int, 1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index.3 = $const24.11 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32return_value.15 = cast(value=$30binary_and.14)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0[index00] = $32return_value.15
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 91
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 91
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc98e610>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:48 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [<numba.core.ir.Assign object at 0x7fb0bc84bee0>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7fb0bc7bc370>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x7fb0bc6d1b80>],
             '$14load_global.5.1': [<numba.core.ir.Assign object at 0x7fb0bc84b460>],
             '$16load_attr.6.1': [<numba.core.ir.Assign object at 0x7fb0bc84b640>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7fb0bc846f10>],
             '$26binary_subscr.12': [<numba.core.ir.Assign object at 0x7fb0bc8465e0>],
             '$28compare_op.13': [<numba.core.ir.Assign object at 0x7fb0bc6119d0>],
             '$30binary_and.14': [<numba.core.ir.Assign object at 0x7fb0bc960490>],
             '$32build_slice.13.1': [<numba.core.ir.Assign object at 0x7fb0bc961d90>],
             '$32build_slice.14.1': [<numba.core.ir.Assign object at 0x7fb0bc961f70>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7fb0bc95fbe0>],
             '$44build_slice.19.1': [<numba.core.ir.Assign object at 0x7fb0bc96cac0>],
             '$44build_slice.20.1': [<numba.core.ir.Assign object at 0x7fb0bc96c760>],
             '$48load_global.21.1': [<numba.core.ir.Assign object at 0x7fb0bc96c340>],
             '$50load_global.22.1': [<numba.core.ir.Assign object at 0x7fb0bc96f1c0>],
             '$56call_function.25.1': [<numba.core.ir.Assign object at 0x7fb0bc96f790>],
             '$58unary_negative.26.1': [<numba.core.ir.Assign object at 0x7fb0bc96f040>],
             '$64binary_subscr.29.1': [<numba.core.ir.Assign object at 0x7fb0bc838f70>],
             '$66load_global.30.1': [<numba.core.ir.Assign object at 0x7fb0bc838a60>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fb0bc7bc5e0>],
             '$72call_function.33.1': [<numba.core.ir.Assign object at 0x7fb0bc838850>],
             '$74binary_subtract.34.1': [<numba.core.ir.Assign object at 0x7fb0bc8384f0>],
             '$76call_function.35.1': [<numba.core.ir.Assign object at 0x7fb0bc8382e0>],
             '$78get_iter.36.1': [<numba.core.ir.Assign object at 0x7fb0bc838040>],
             '$80for_iter.1.1': [<numba.core.ir.Assign object at 0x7fb0bc9ec760>],
             '$80for_iter.2.1': [<numba.core.ir.Assign object at 0x7fb0bc9ecc10>],
             '$80for_iter.3.1': [<numba.core.ir.Assign object at 0x7fb0bc9ece80>],
             '$8load_global.2.1': [<numba.core.ir.Assign object at 0x7fb0bc84bca0>],
             '$92return_value.1.1': [<numba.core.ir.Assign object at 0x7fb0bca753d0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bca51880>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc653ee0>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7fb0bc5fb580>],
             '$const24.9.1': [<numba.core.ir.Assign object at 0x7fb0bc9868e0>],
             '$const28.11.1': [<numba.core.ir.Assign object at 0x7fb0bc986a00>],
             '$const30.12.1': [<numba.core.ir.Assign object at 0x7fb0bc961310>],
             '$const36.15.1': [<numba.core.ir.Assign object at 0x7fb0bc961910>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bc723070>],
             '$const40.17.1': [<numba.core.ir.Assign object at 0x7fb0bc9747f0>],
             '$const42.18.1': [<numba.core.ir.Assign object at 0x7fb0bc974e80>],
             '$const52.23.1': [<numba.core.ir.Assign object at 0x7fb0bc96f640>],
             '$const54.24.1': [<numba.core.ir.Assign object at 0x7fb0bc96ff40>],
             '$const62.28.1': [<numba.core.ir.Assign object at 0x7fb0bc838f40>],
             '$const68.31.1': [<numba.core.ir.Assign object at 0x7fb0bc8387c0>],
             '$const70.32.1': [<numba.core.ir.Assign object at 0x7fb0bc838790>],
             '$phi80.0.1': [<numba.core.ir.Assign object at 0x7fb0bc986a30>],
             '$phi82.1.1': [<numba.core.ir.Assign object at 0x7fb0bc838eb0>],
             'full_shape0': [<numba.core.ir.Assign object at 0x7fb0bc84b730>],
             'index00': [<numba.core.ir.Assign object at 0x7fb0bc9ec280>],
             'out0': [<numba.core.ir.Assign object at 0x7fb0bc9863d0>],
             'stencil_index': [<numba.core.ir.Assign object at 0x7fb0bc7bc670>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x7fb0bc7bc460>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x7fb0bc846e50>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x7fb0bc8463d0>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc84b160>]})
Tue, 30 Jan 2024 09:22:48 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1068)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$x4.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const18.8']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:48 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bcffff70>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc769af0>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: y = arg(1, name=y)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bcffff70>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const12.5 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: y[slice(None, None, None)] = $6call_function.2
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$const18.8)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:48 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [<numba.core.ir.Assign object at 0x7fb0bce92d00>],
             '$14build_slice.7': [<numba.core.ir.Assign object at 0x7fb0bce92f10>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bcecf8e0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bce92190>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fb0bce92f40>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bce92a90>],
             '$const12.5': [<numba.core.ir.Assign object at 0x7fb0bce92ac0>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bce92760>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bcf1dd60>],
             'y': [<numba.core.ir.Assign object at 0x7fb0bcf1de20>]})
Tue, 30 Jan 2024 09:22:48 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=8, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=80, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$8load_global.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$20call_function_kw.8']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$32build_slice.14']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$44build_slice.20']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$56call_function.25']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$76call_function.35']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: ['$phi80.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=80 nstack_initial=1)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=80, inst=FOR_ITER(arg=8, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi80.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=90 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$out090.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=82 nstack_initial=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$const84.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=80, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:231] DEBUG defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:262] DEBUG keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:48 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bccc0760>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: full_shape0 = getattr(value=x, attr=shape)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const24.9.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const28.11.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const30.12.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0[$32build_slice.14.1] = $const24.9.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const36.15.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const40.17.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const42.18.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0[$44build_slice.20.1] = $const36.15.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $48load_global.21.1 = global(range: <class 'range'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $50load_global.22.1 = global(min: <built-in function min>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const52.23.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const54.24.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const62.28.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $66load_global.30.1 = global(max: <built-in function max>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const68.31.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const70.32.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $phi80.0.1 = $78get_iter.36.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 80
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bccc0760>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $phi82.1.1 = $80for_iter.2.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: branch $80for_iter.3.1, 82, 92
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 82
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bccc0760>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: index00 = $phi82.1.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 90
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 92
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bccc0760>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $92return_value.1.1 = cast(value=out0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: return $92return_value.1.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 90
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bccc0760>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index = $const4.1 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(int, -1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index.1 = $const10.4 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index.2 = $const18.8 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const24.11 = const(int, 1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index.3 = $const24.11 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32return_value.15 = cast(value=$30binary_and.14)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0[index00] = $32return_value.15
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 91
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 91
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bccc0760>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:48 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [<numba.core.ir.Assign object at 0x7fb0bccb5220>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7fb0bcca8f40>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x7fb0bcba1ee0>],
             '$14load_global.5.1': [<numba.core.ir.Assign object at 0x7fb0bccb54c0>],
             '$16load_attr.6.1': [<numba.core.ir.Assign object at 0x7fb0bccb5640>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7fb0bcccd1c0>],
             '$26binary_subscr.12': [<numba.core.ir.Assign object at 0x7fb0bcccd400>],
             '$28compare_op.13': [<numba.core.ir.Assign object at 0x7fb0bc5738e0>],
             '$30binary_and.14': [<numba.core.ir.Assign object at 0x7fb0bc77bd90>],
             '$32build_slice.13.1': [<numba.core.ir.Assign object at 0x7fb0bccb9250>],
             '$32build_slice.14.1': [<numba.core.ir.Assign object at 0x7fb0bccb9370>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7fb0bc5c2f70>],
             '$44build_slice.19.1': [<numba.core.ir.Assign object at 0x7fb0bccb9b50>],
             '$44build_slice.20.1': [<numba.core.ir.Assign object at 0x7fb0bccb9c70>],
             '$48load_global.21.1': [<numba.core.ir.Assign object at 0x7fb0bccb9e80>],
             '$50load_global.22.1': [<numba.core.ir.Assign object at 0x7fb0bccdb040>],
             '$56call_function.25.1': [<numba.core.ir.Assign object at 0x7fb0bccdb4f0>],
             '$58unary_negative.26.1': [<numba.core.ir.Assign object at 0x7fb0bccdb640>],
             '$64binary_subscr.29.1': [<numba.core.ir.Assign object at 0x7fb0bccdba60>],
             '$66load_global.30.1': [<numba.core.ir.Assign object at 0x7fb0bccdbbe0>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fb0bcca8d00>],
             '$72call_function.33.1': [<numba.core.ir.Assign object at 0x7fb0bcccf0d0>],
             '$74binary_subtract.34.1': [<numba.core.ir.Assign object at 0x7fb0bcccf220>],
             '$76call_function.35.1': [<numba.core.ir.Assign object at 0x7fb0bcccf3d0>],
             '$78get_iter.36.1': [<numba.core.ir.Assign object at 0x7fb0bcccf520>],
             '$80for_iter.1.1': [<numba.core.ir.Assign object at 0x7fb0bcccf640>],
             '$80for_iter.2.1': [<numba.core.ir.Assign object at 0x7fb0bcccf760>],
             '$80for_iter.3.1': [<numba.core.ir.Assign object at 0x7fb0bcccf880>],
             '$8load_global.2.1': [<numba.core.ir.Assign object at 0x7fb0bccb50a0>],
             '$92return_value.1.1': [<numba.core.ir.Assign object at 0x7fb0bccd21c0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bcec6040>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bcbec430>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7fb0bcc41430>],
             '$const24.9.1': [<numba.core.ir.Assign object at 0x7fb0bccb5c40>],
             '$const28.11.1': [<numba.core.ir.Assign object at 0x7fb0bccb5ee0>],
             '$const30.12.1': [<numba.core.ir.Assign object at 0x7fb0bccb90a0>],
             '$const36.15.1': [<numba.core.ir.Assign object at 0x7fb0bccb9580>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bcecfc10>],
             '$const40.17.1': [<numba.core.ir.Assign object at 0x7fb0bccb9820>],
             '$const42.18.1': [<numba.core.ir.Assign object at 0x7fb0bccb99a0>],
             '$const52.23.1': [<numba.core.ir.Assign object at 0x7fb0bccdb1c0>],
             '$const54.24.1': [<numba.core.ir.Assign object at 0x7fb0bccdb340>],
             '$const62.28.1': [<numba.core.ir.Assign object at 0x7fb0bccdb8e0>],
             '$const68.31.1': [<numba.core.ir.Assign object at 0x7fb0bccdbd60>],
             '$const70.32.1': [<numba.core.ir.Assign object at 0x7fb0bccdbee0>],
             '$phi80.0.1': [<numba.core.ir.Assign object at 0x7fb0bccb5820>],
             '$phi82.1.1': [<numba.core.ir.Assign object at 0x7fb0bcccda90>],
             'full_shape0': [<numba.core.ir.Assign object at 0x7fb0bcccddf0>],
             'index00': [<numba.core.ir.Assign object at 0x7fb0bcccfb20>],
             'out0': [<numba.core.ir.Assign object at 0x7fb0bccb5af0>],
             'stencil_index': [<numba.core.ir.Assign object at 0x7fb0bcca8c70>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x7fb0bcca8eb0>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x7fb0bcccd130>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x7fb0bcccd370>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bcccdb80>]})
Tue, 30 Jan 2024 09:22:48 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1068)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$x4.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const18.8']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:48 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bcffff70>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcb5a100>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: y = arg(1, name=y)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bcffff70>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const12.5 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: y[slice(None, None, None)] = $6call_function.2
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$const18.8)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:48 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [<numba.core.ir.Assign object at 0x7fb0bcbf0340>],
             '$14build_slice.7': [<numba.core.ir.Assign object at 0x7fb0bcbf0460>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bcbf07f0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bcbe3a90>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fb0bcbe3d60>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bcbe3fd0>],
             '$const12.5': [<numba.core.ir.Assign object at 0x7fb0bcbf0190>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bcbf0670>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bcbe3070>],
             'y': [<numba.core.ir.Assign object at 0x7fb0bcbe33d0>]})
Tue, 30 Jan 2024 09:22:48 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=8, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=80, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$8load_global.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$20call_function_kw.8']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$32build_slice.14']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$44build_slice.20']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$56call_function.25']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$76call_function.35']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: ['$phi80.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=80 nstack_initial=1)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=80, inst=FOR_ITER(arg=8, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi80.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=90 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$out090.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=82 nstack_initial=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$const84.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=80, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:231] DEBUG defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:262] DEBUG keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:48 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcc18790>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: full_shape0 = getattr(value=x, attr=shape)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const24.9.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const28.11.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const30.12.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0[$32build_slice.14.1] = $const24.9.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const36.15.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const40.17.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const42.18.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0[$44build_slice.20.1] = $const36.15.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $48load_global.21.1 = global(range: <class 'range'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $50load_global.22.1 = global(min: <built-in function min>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const52.23.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const54.24.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const62.28.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $66load_global.30.1 = global(max: <built-in function max>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const68.31.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const70.32.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $phi80.0.1 = $78get_iter.36.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 80
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcc18790>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $phi82.1.1 = $80for_iter.2.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: branch $80for_iter.3.1, 82, 92
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 82
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcc18790>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: index00 = $phi82.1.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 90
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 92
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcc18790>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $92return_value.1.1 = cast(value=out0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: return $92return_value.1.1
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 90
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcc18790>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index = $const4.1 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(int, -1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index.1 = $const10.4 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index.2 = $const18.8 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const24.11 = const(int, 1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: stencil_index.3 = $const24.11 + index00
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32return_value.15 = cast(value=$30binary_and.14)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0[index00] = $32return_value.15
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 91
Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 91
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcc18790>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:48 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [<numba.core.ir.Assign object at 0x7fb0bc39e790>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7fb0bc384b80>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x7fb0bc7ce700>],
             '$14load_global.5.1': [<numba.core.ir.Assign object at 0x7fb0bc39ea30>],
             '$16load_attr.6.1': [<numba.core.ir.Assign object at 0x7fb0bc39ebb0>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7fb0bc384910>],
             '$26binary_subscr.12': [<numba.core.ir.Assign object at 0x7fb0bc384640>],
             '$28compare_op.13': [<numba.core.ir.Assign object at 0x7fb0bc43ce50>],
             '$30binary_and.14': [<numba.core.ir.Assign object at 0x7fb0bc43b0d0>],
             '$32build_slice.13.1': [<numba.core.ir.Assign object at 0x7fb0bc3927c0>],
             '$32build_slice.14.1': [<numba.core.ir.Assign object at 0x7fb0bc3928e0>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7fb0bc43e670>],
             '$44build_slice.19.1': [<numba.core.ir.Assign object at 0x7fb0bc391100>],
             '$44build_slice.20.1': [<numba.core.ir.Assign object at 0x7fb0bc391220>],
             '$48load_global.21.1': [<numba.core.ir.Assign object at 0x7fb0bc391430>],
             '$50load_global.22.1': [<numba.core.ir.Assign object at 0x7fb0bc3915b0>],
             '$56call_function.25.1': [<numba.core.ir.Assign object at 0x7fb0bc391a60>],
             '$58unary_negative.26.1': [<numba.core.ir.Assign object at 0x7fb0bc391bb0>],
             '$64binary_subscr.29.1': [<numba.core.ir.Assign object at 0x7fb0bc391fd0>],
             '$66load_global.30.1': [<numba.core.ir.Assign object at 0x7fb0bcc13190>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fb0bc453550>],
             '$72call_function.33.1': [<numba.core.ir.Assign object at 0x7fb0bcc13640>],
             '$74binary_subtract.34.1': [<numba.core.ir.Assign object at 0x7fb0bcc13790>],
             '$76call_function.35.1': [<numba.core.ir.Assign object at 0x7fb0bcc13940>],
             '$78get_iter.36.1': [<numba.core.ir.Assign object at 0x7fb0bcc13a90>],
             '$80for_iter.1.1': [<numba.core.ir.Assign object at 0x7fb0bcc13bb0>],
             '$80for_iter.2.1': [<numba.core.ir.Assign object at 0x7fb0bcc13cd0>],
             '$80for_iter.3.1': [<numba.core.ir.Assign object at 0x7fb0bcc13df0>],
             '$8load_global.2.1': [<numba.core.ir.Assign object at 0x7fb0bc39e610>],
             '$92return_value.1.1': [<numba.core.ir.Assign object at 0x7fb0bcbf2730>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bc7cf6d0>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc7d2f10>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7fb0bc45b760>],
             '$const24.9.1': [<numba.core.ir.Assign object at 0x7fb0bc3921f0>],
             '$const28.11.1': [<numba.core.ir.Assign object at 0x7fb0bc392490>],
             '$const30.12.1': [<numba.core.ir.Assign object at 0x7fb0bc392610>],
             '$const36.15.1': [<numba.core.ir.Assign object at 0x7fb0bc392af0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bc42b700>],
             '$const40.17.1': [<numba.core.ir.Assign object at 0x7fb0bc392d90>],
             '$const42.18.1': [<numba.core.ir.Assign object at 0x7fb0bc392f10>],
             '$const52.23.1': [<numba.core.ir.Assign object at 0x7fb0bc391730>],
             '$const54.24.1': [<numba.core.ir.Assign object at 0x7fb0bc3918b0>],
             '$const62.28.1': [<numba.core.ir.Assign object at 0x7fb0bc391e50>],
             '$const68.31.1': [<numba.core.ir.Assign object at 0x7fb0bcc13310>],
             '$const70.32.1': [<numba.core.ir.Assign object at 0x7fb0bcc13490>],
             '$phi80.0.1': [<numba.core.ir.Assign object at 0x7fb0bc39e490>],
             '$phi82.1.1': [<numba.core.ir.Assign object at 0x7fb0bc384280>],
             'full_shape0': [<numba.core.ir.Assign object at 0x7fb0bc39e370>],
             'index00': [<numba.core.ir.Assign object at 0x7fb0bcbf20d0>],
             'out0': [<numba.core.ir.Assign object at 0x7fb0bc3920a0>],
             'stencil_index': [<numba.core.ir.Assign object at 0x7fb0bc43c550>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x7fb0bc384c10>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x7fb0bc384a00>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x7fb0bc3846a0>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc39e0d0>]})
Tue, 30 Jan 2024 09:22:48 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1068)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$x4.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const18.8']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:48 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bcffff70>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcac6460>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: y = arg(1, name=y)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bcffff70>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const12.5 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: y[slice(None, None, None)] = $6call_function.2
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$const18.8)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:48 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [<numba.core.ir.Assign object at 0x7fb0bc958640>],
             '$14build_slice.7': [<numba.core.ir.Assign object at 0x7fb0bc958760>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bc958af0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bc957d90>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fb0bc9580a0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bc958310>],
             '$const12.5': [<numba.core.ir.Assign object at 0x7fb0bc958490>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc958970>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc9572b0>],
             'y': [<numba.core.ir.Assign object at 0x7fb0bc957580>]})
Tue, 30 Jan 2024 09:22:48 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=8, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=80, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$8load_global.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$20call_function_kw.8']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$32build_slice.14']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$44build_slice.20']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$56call_function.25']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$76call_function.35']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: ['$phi80.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=80 nstack_initial=1)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=80, inst=FOR_ITER(arg=8, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi80.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=90 nstack_initial=0)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$out090.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:105] DEBUG stack: ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=82 nstack_initial=2)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$const84.2']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:333] DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=80, lineno=7)
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:231] DEBUG defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:262] DEBUG keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
Tue, 30 Jan 2024 09:22:48 byteflow.py[line:136] DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:48 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

Tue, 30 Jan 2024 09:22:48 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:48 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc95ee80>
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: full_shape0 = getattr(value=x, attr=shape)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const24.9.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const28.11.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $const30.12.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:48 ssa.py[line:193] DEBUG on stmt: out0[$32build_slice.14.1] = $const24.9.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const36.15.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const40.17.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const42.18.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: out0[$44build_slice.20.1] = $const36.15.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $48load_global.21.1 = global(range: <class 'range'>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $50load_global.22.1 = global(min: <built-in function min>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const52.23.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const54.24.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const62.28.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $66load_global.30.1 = global(max: <built-in function max>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const68.31.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const70.32.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $phi80.0.1 = $78get_iter.36.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 80
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc95ee80>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $phi82.1.1 = $80for_iter.2.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: branch $80for_iter.3.1, 82, 92
Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 82
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc95ee80>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: index00 = $phi82.1.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: jump 90
Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 92
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc95ee80>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $92return_value.1.1 = cast(value=out0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: return $92return_value.1.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 90
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc95ee80>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: stencil_index = $const4.1 + index00
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(int, -1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: stencil_index.1 = $const10.4 + index00
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: stencil_index.2 = $const18.8 + index00
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const24.11 = const(int, 1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: stencil_index.3 = $const24.11 + index00
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $32return_value.15 = cast(value=$30binary_and.14)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: out0[index00] = $32return_value.15
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: jump 91
Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 91
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc95ee80>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:49 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [<numba.core.ir.Assign object at 0x7fb0bcac6850>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7fb0bcaddd90>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x7fb0bc92c0d0>],
             '$14load_global.5.1': [<numba.core.ir.Assign object at 0x7fb0bcac6280>],
             '$16load_attr.6.1': [<numba.core.ir.Assign object at 0x7fb0bcac6b80>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7fb0bcaddcd0>],
             '$26binary_subscr.12': [<numba.core.ir.Assign object at 0x7fb0bcaddf40>],
             '$28compare_op.13': [<numba.core.ir.Assign object at 0x7fb0bc609070>],
             '$30binary_and.14': [<numba.core.ir.Assign object at 0x7fb0bc609d30>],
             '$32build_slice.13.1': [<numba.core.ir.Assign object at 0x7fb0bcac0dc0>],
             '$32build_slice.14.1': [<numba.core.ir.Assign object at 0x7fb0bcac0fd0>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7fb0bc610ee0>],
             '$44build_slice.19.1': [<numba.core.ir.Assign object at 0x7fb0bc619910>],
             '$44build_slice.20.1': [<numba.core.ir.Assign object at 0x7fb0bc619a30>],
             '$48load_global.21.1': [<numba.core.ir.Assign object at 0x7fb0bc619c40>],
             '$50load_global.22.1': [<numba.core.ir.Assign object at 0x7fb0bc619dc0>],
             '$56call_function.25.1': [<numba.core.ir.Assign object at 0x7fb0bc9292b0>],
             '$58unary_negative.26.1': [<numba.core.ir.Assign object at 0x7fb0bc929400>],
             '$64binary_subscr.29.1': [<numba.core.ir.Assign object at 0x7fb0bc929820>],
             '$66load_global.30.1': [<numba.core.ir.Assign object at 0x7fb0bc9299a0>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fb0bc5f62e0>],
             '$72call_function.33.1': [<numba.core.ir.Assign object at 0x7fb0bc929e50>],
             '$74binary_subtract.34.1': [<numba.core.ir.Assign object at 0x7fb0bc929fa0>],
             '$76call_function.35.1': [<numba.core.ir.Assign object at 0x7fb0bc91f190>],
             '$78get_iter.36.1': [<numba.core.ir.Assign object at 0x7fb0bc91f2e0>],
             '$80for_iter.1.1': [<numba.core.ir.Assign object at 0x7fb0bc91f400>],
             '$80for_iter.2.1': [<numba.core.ir.Assign object at 0x7fb0bc91f520>],
             '$80for_iter.3.1': [<numba.core.ir.Assign object at 0x7fb0bc91f640>],
             '$8load_global.2.1': [<numba.core.ir.Assign object at 0x7fb0bcac69a0>],
             '$92return_value.1.1': [<numba.core.ir.Assign object at 0x7fb0bc91ff40>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bc9382b0>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc9300d0>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7fb0bc61e0a0>],
             '$const24.9.1': [<numba.core.ir.Assign object at 0x7fb0bc6510a0>],
             '$const28.11.1': [<numba.core.ir.Assign object at 0x7fb0bcac08b0>],
             '$const30.12.1': [<numba.core.ir.Assign object at 0x7fb0bcac05e0>],
             '$const36.15.1': [<numba.core.ir.Assign object at 0x7fb0bcac0d60>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bc957b80>],
             '$const40.17.1': [<numba.core.ir.Assign object at 0x7fb0bcac0880>],
             '$const42.18.1': [<numba.core.ir.Assign object at 0x7fb0bc6195b0>],
             '$const52.23.1': [<numba.core.ir.Assign object at 0x7fb0bc619f70>],
             '$const54.24.1': [<numba.core.ir.Assign object at 0x7fb0bc929100>],
             '$const62.28.1': [<numba.core.ir.Assign object at 0x7fb0bc9296a0>],
             '$const68.31.1': [<numba.core.ir.Assign object at 0x7fb0bc929b20>],
             '$const70.32.1': [<numba.core.ir.Assign object at 0x7fb0bc929ca0>],
             '$phi80.0.1': [<numba.core.ir.Assign object at 0x7fb0bcac6fd0>],
             '$phi82.1.1': [<numba.core.ir.Assign object at 0x7fb0bcadd220>],
             'full_shape0': [<numba.core.ir.Assign object at 0x7fb0bcac6d00>],
             'index00': [<numba.core.ir.Assign object at 0x7fb0bc91f8e0>],
             'out0': [<numba.core.ir.Assign object at 0x7fb0bc45bf40>],
             'stencil_index': [<numba.core.ir.Assign object at 0x7fb0bc609220>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x7fb0bcaddca0>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x7fb0bcadde80>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x7fb0bcadd7c0>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bcac6ac0>]})
Tue, 30 Jan 2024 09:22:49 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1068)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$2load_global.0', '$x4.1']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const18.8']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:49 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bcffff70>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc932fd0>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: y = arg(1, name=y)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7fb0bcffff70>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const12.5 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: y[slice(None, None, None)] = $6call_function.2
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$const18.8)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:49 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [<numba.core.ir.Assign object at 0x7fb0bc6f33d0>],
             '$14build_slice.7': [<numba.core.ir.Assign object at 0x7fb0bc6f34f0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bc6f3880>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bc718b20>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fb0bc718df0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bc6f30a0>],
             '$const12.5': [<numba.core.ir.Assign object at 0x7fb0bc6f3220>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bc6f3700>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc718040>],
             'y': [<numba.core.ir.Assign object at 0x7fb0bc7183a0>]})
Tue, 30 Jan 2024 09:22:49 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=8, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=80, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$8load_global.2']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$10load_attr.3']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$20call_function_kw.8']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const24.9']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const24.9', '$out026.10', '$32build_slice.14']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const36.15']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$const36.15', '$out038.16', '$44build_slice.20']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$56call_function.25']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$76call_function.35']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:105] DEBUG stack: ['$phi80.0']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=80 nstack_initial=1)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=80, inst=FOR_ITER(arg=8, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$phi80.0']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=90 nstack_initial=0)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$out090.0']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=82 nstack_initial=2)])
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:105] DEBUG stack: ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=82 nstack_initial=2)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$phi82.1']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$phi82.0', '$const84.2']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=80, lineno=7)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$phi82.0']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=80 nstack_initial=1)])
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:231] DEBUG defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:262] DEBUG keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:136] DEBUG block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:136] DEBUG block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:136] DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:49 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc52cf40>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: full_shape0 = getattr(value=x, attr=shape)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const24.9.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const28.11.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const30.12.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: out0[$32build_slice.14.1] = $const24.9.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const36.15.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const40.17.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const42.18.1 = const(NoneType, None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: out0[$44build_slice.20.1] = $const36.15.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $48load_global.21.1 = global(range: <class 'range'>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $50load_global.22.1 = global(min: <built-in function min>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const52.23.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const54.24.1 = const(int, -1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const62.28.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $66load_global.30.1 = global(max: <built-in function max>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const68.31.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const70.32.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $phi80.0.1 = $78get_iter.36.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 80
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc52cf40>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $phi82.1.1 = $80for_iter.2.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: branch $80for_iter.3.1, 82, 92
Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 82
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc52cf40>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: index00 = $phi82.1.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: jump 90
Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 92
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc52cf40>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $92return_value.1.1 = cast(value=out0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: return $92return_value.1.1
Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 90
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc52cf40>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: stencil_index = $const4.1 + index00
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(int, -1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: stencil_index.1 = $const10.4 + index00
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const18.8 = const(int, 0)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: stencil_index.2 = $const18.8 + index00
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const24.11 = const(int, 1)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: stencil_index.3 = $const24.11 + index00
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $32return_value.15 = cast(value=$30binary_and.14)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: out0[index00] = $32return_value.15
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: jump 91
Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 91
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc52cf40>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: jump 80
Tue, 30 Jan 2024 09:22:49 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [<numba.core.ir.Assign object at 0x7fb0bcaef9d0>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7fb0bcaf5730>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x7fb0bcb169a0>],
             '$14load_global.5.1': [<numba.core.ir.Assign object at 0x7fb0bcaefc70>],
             '$16load_attr.6.1': [<numba.core.ir.Assign object at 0x7fb0bcaefdf0>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7fb0bcaf5970>],
             '$26binary_subscr.12': [<numba.core.ir.Assign object at 0x7fb0bcaf5bb0>],
             '$28compare_op.13': [<numba.core.ir.Assign object at 0x7fb0bcb117c0>],
             '$30binary_and.14': [<numba.core.ir.Assign object at 0x7fb0bcb100d0>],
             '$32build_slice.13.1': [<numba.core.ir.Assign object at 0x7fb0bcafca00>],
             '$32build_slice.14.1': [<numba.core.ir.Assign object at 0x7fb0bcafcb20>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7fb0bcb0a8b0>],
             '$44build_slice.19.1': [<numba.core.ir.Assign object at 0x7fb0bcae3340>],
             '$44build_slice.20.1': [<numba.core.ir.Assign object at 0x7fb0bcae3460>],
             '$48load_global.21.1': [<numba.core.ir.Assign object at 0x7fb0bcae3670>],
             '$50load_global.22.1': [<numba.core.ir.Assign object at 0x7fb0bcae37f0>],
             '$56call_function.25.1': [<numba.core.ir.Assign object at 0x7fb0bcae3ca0>],
             '$58unary_negative.26.1': [<numba.core.ir.Assign object at 0x7fb0bcae3df0>],
             '$64binary_subscr.29.1': [<numba.core.ir.Assign object at 0x7fb0bcadf250>],
             '$66load_global.30.1': [<numba.core.ir.Assign object at 0x7fb0bcadf3d0>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fb0bcaf6790>],
             '$72call_function.33.1': [<numba.core.ir.Assign object at 0x7fb0bcadf880>],
             '$74binary_subtract.34.1': [<numba.core.ir.Assign object at 0x7fb0bcadf9d0>],
             '$76call_function.35.1': [<numba.core.ir.Assign object at 0x7fb0bcadfb80>],
             '$78get_iter.36.1': [<numba.core.ir.Assign object at 0x7fb0bcadfcd0>],
             '$80for_iter.1.1': [<numba.core.ir.Assign object at 0x7fb0bcadfdf0>],
             '$80for_iter.2.1': [<numba.core.ir.Assign object at 0x7fb0bcadff10>],
             '$80for_iter.3.1': [<numba.core.ir.Assign object at 0x7fb0bc521070>],
             '$8load_global.2.1': [<numba.core.ir.Assign object at 0x7fb0bcaef850>],
             '$92return_value.1.1': [<numba.core.ir.Assign object at 0x7fb0bc521970>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bcb1caf0>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7fb0bcb14070>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7fb0bcb057f0>],
             '$const24.9.1': [<numba.core.ir.Assign object at 0x7fb0bcafc430>],
             '$const28.11.1': [<numba.core.ir.Assign object at 0x7fb0bcafc6d0>],
             '$const30.12.1': [<numba.core.ir.Assign object at 0x7fb0bcafc850>],
             '$const36.15.1': [<numba.core.ir.Assign object at 0x7fb0bcafcd30>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bc713e20>],
             '$const40.17.1': [<numba.core.ir.Assign object at 0x7fb0bcafcfd0>],
             '$const42.18.1': [<numba.core.ir.Assign object at 0x7fb0bcae3190>],
             '$const52.23.1': [<numba.core.ir.Assign object at 0x7fb0bcae3970>],
             '$const54.24.1': [<numba.core.ir.Assign object at 0x7fb0bcae3af0>],
             '$const62.28.1': [<numba.core.ir.Assign object at 0x7fb0bcadf0d0>],
             '$const68.31.1': [<numba.core.ir.Assign object at 0x7fb0bcadf550>],
             '$const70.32.1': [<numba.core.ir.Assign object at 0x7fb0bcadf6d0>],
             '$phi80.0.1': [<numba.core.ir.Assign object at 0x7fb0bcafc550>],
             '$phi82.1.1': [<numba.core.ir.Assign object at 0x7fb0bcaef220>],
             'full_shape0': [<numba.core.ir.Assign object at 0x7fb0bcaef5b0>],
             'index00': [<numba.core.ir.Assign object at 0x7fb0bc521310>],
             'out0': [<numba.core.ir.Assign object at 0x7fb0bcafc2e0>],
             'stencil_index': [<numba.core.ir.Assign object at 0x7fb0bcb11a00>],
             'stencil_index.1': [<numba.core.ir.Assign object at 0x7fb0bcaf56a0>],
             'stencil_index.2': [<numba.core.ir.Assign object at 0x7fb0bcaf58e0>],
             'stencil_index.3': [<numba.core.ir.Assign object at 0x7fb0bcaf5b20>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bcaef310>]})
Tue, 30 Jan 2024 09:22:49 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2448)
           2	LOAD_FAST(arg=0, lineno=2453)
           4	LOAD_ATTR(arg=0, lineno=2453)
           6	LOAD_CONST(arg=1, lineno=2453)
           8	BINARY_POWER(arg=None, lineno=2453)
          10	LOAD_FAST(arg=0, lineno=2453)
          12	LOAD_ATTR(arg=1, lineno=2453)
          14	LOAD_CONST(arg=1, lineno=2453)
          16	BINARY_POWER(arg=None, lineno=2453)
          18	BINARY_ADD(arg=None, lineno=2453)
          20	RETURN_VALUE(arg=None, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2448)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=8, inst=BINARY_POWER(arg=None, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$4load_attr.1', '$const6.2']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$8binary_power.3']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$8binary_power.3', '$x10.4']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$8binary_power.3', '$12load_attr.5']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=16, inst=BINARY_POWER(arg=None, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$8binary_power.3', '$12load_attr.5', '$const14.6']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$8binary_power.3', '$16binary_power.7']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=2453)
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:334] DEBUG stack ['$18binary_add.8']
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:49 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8binary_power.3'}), (10, {'res': '$x10.4'}), (12, {'item': '$x10.4', 'res': '$12load_attr.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$12load_attr.5', 'rhs': '$const14.6', 'res': '$16binary_power.7'}), (18, {'lhs': '$8binary_power.3', 'rhs': '$16binary_power.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:49 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    $4load_attr.1 = getattr(value=x, attr=real) ['$4load_attr.1', 'x']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8binary_power.3 = $4load_attr.1 ** $const6.2 ['$4load_attr.1', '$8binary_power.3', '$const6.2']
    $12load_attr.5 = getattr(value=x, attr=imag) ['$12load_attr.5', 'x']
    $const14.6 = const(int, 2)               ['$const14.6']
    $16binary_power.7 = $12load_attr.5 ** $const14.6 ['$12load_attr.5', '$16binary_power.7', '$const14.6']
    $18binary_add.8 = $8binary_power.3 + $16binary_power.7 ['$16binary_power.7', '$18binary_add.8', '$8binary_power.3']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:49 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:49 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc93cb50>
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $4load_attr.1 = getattr(value=x, attr=real)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const6.2 = const(int, 2)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $8binary_power.3 = $4load_attr.1 ** $const6.2
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $12load_attr.5 = getattr(value=x, attr=imag)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $const14.6 = const(int, 2)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $16binary_power.7 = $12load_attr.5 ** $const14.6
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $18binary_add.8 = $8binary_power.3 + $16binary_power.7
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$18binary_add.8)
Tue, 30 Jan 2024 09:22:49 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:49 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7fb0bc93ce80>],
             '$16binary_power.7': [<numba.core.ir.Assign object at 0x7fb0bc612fa0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fb0bc612100>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bc612670>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fb0bc957430>],
             '$8binary_power.3': [<numba.core.ir.Assign object at 0x7fb0bc7cfb20>],
             '$const14.6': [<numba.core.ir.Assign object at 0x7fb0bc93cbb0>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7fb0bc957910>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc612850>]})
Tue, 30 Jan 2024 09:22:49 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
          96	JUMP_FORWARD(arg=8, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=237)
         138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	JUMP_ABSOLUTE(arg=130, lineno=241)
>        172	LOAD_FAST(arg=3, lineno=243)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=243)
         176	LOAD_CONST(arg=8, lineno=243)
         178	LOAD_FAST(arg=2, lineno=243)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         182	RETURN_VALUE(arg=None, lineno=243)
>        184	LOAD_FAST(arg=2, lineno=243)
         186	RETURN_VALUE(arg=None, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=214)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$2load_deref.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$2load_deref.0', '$const4.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$10load_deref.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$10load_deref.3', '$a12.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$14call_function.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$b18.6']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$b18.6', '$const20.7']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=218)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$22compare_op.8']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=26 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$const26.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$b30.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$32unary_negative.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp36.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp36.3', '$const38.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=221)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$40compare_op.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=98 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$const98.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$b102.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=44 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$44load_global.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=48 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=223)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$48load_deref.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=106 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp106.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp106.0', '$const108.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=234)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$110compare_op.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=52 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a52.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a52.0', '$const54.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=224)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$56compare_op.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=114 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$114load_global.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$116load_method.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$116load_method.1', '$a118.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$116load_method.1', '$a118.2', '$120load_global.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$116load_method.1', '$a118.2', '$124call_function.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$126call_method.6']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=130 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp130.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp130.0', '$const132.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=237)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$134compare_op.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=60 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=225)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$60load_deref.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=76 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a76.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a76.0', '$const78.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$80compare_op.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=138 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp138.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp138.0', '$const140.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=238)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$142binary_and.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=172 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$invert172.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=64 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$64load_deref.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=68 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$68load_global.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$68load_global.0', '$const70.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$72call_function.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=84 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a84.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a84.0', '$const86.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$88compare_op.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=146 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$r146.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$r146.0', '$a148.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$150inplace_multiply.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=154 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp154.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp154.0', '$const156.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$158inplace_rshift.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a162.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a162.3', '$a164.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$166inplace_multiply.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=241)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=176 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$const176.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$const176.0', '$r178.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$180binary_true_divide.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=184 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$r184.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=92 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$const92.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 interpreter.py[line:1390] DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float32)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float32)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bc5462e0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7fb0bc6e9df0>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x7fb0bc48ec40>],
             '$112pred': [<numba.core.ir.Assign object at 0x7fb0bc5f95b0>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x7fb0bc5f9d60>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x7fb0bc5f9640>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x7fb0bc5f9e80>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x7fb0bc5f92b0>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x7fb0bc5f9130>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x7fb0bc5f91f0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x7fb0bc60b790>],
             '$136pred': [<numba.core.ir.Assign object at 0x7fb0bc60be50>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x7fb0bc60b520>],
             '$144pred': [<numba.core.ir.Assign object at 0x7fb0bc60b6a0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x7fb0bc900580>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x7fb0bc900eb0>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x7fb0bc900400>],
             '$174pred': [<numba.core.ir.Assign object at 0x7fb0bc6eb280>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fb0bc6eb850>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x7fb0bc6eb070>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x7fb0bc6ebc70>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x7fb0bc6e9c10>],
             '$24pred': [<numba.core.ir.Assign object at 0x7fb0bc8f1ac0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fb0bc932880>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x7fb0bc8f1910>],
             '$42pred': [<numba.core.ir.Assign object at 0x7fb0bc8f1e80>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fb0bc8f19a0>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x7fb0bc7139d0>],
             '$50pred': [<numba.core.ir.Assign object at 0x7fb0bc713df0>],
             '$const108.1': [<numba.core.ir.Assign object at 0x7fb0bc48ed60>],
             '$const132.1': [<numba.core.ir.Assign object at 0x7fb0bc60b4f0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x7fb0bc60b5e0>],
             '$const156.1': [<numba.core.ir.Assign object at 0x7fb0bc900310>],
             '$const176.0': [<numba.core.ir.Assign object at 0x7fb0bc6eb7c0>],
             '$const20.7': [<numba.core.ir.Assign object at 0x7fb0bc6e9580>],
             '$const38.4': [<numba.core.ir.Assign object at 0x7fb0bc8f1130>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bc932ac0>],
             'a': [<numba.core.ir.Assign object at 0x7fb0bc932a30>],
             'a.1': [<numba.core.ir.Assign object at 0x7fb0bc6e9700>,
                     <numba.core.ir.Assign object at 0x7fb0bc9008b0>],
             'b': [<numba.core.ir.Assign object at 0x7fb0bc932970>],
             'bool112': [<numba.core.ir.Assign object at 0x7fb0bc48eac0>],
             'bool136': [<numba.core.ir.Assign object at 0x7fb0bc60b970>],
             'bool144': [<numba.core.ir.Assign object at 0x7fb0bc60b280>],
             'bool174': [<numba.core.ir.Assign object at 0x7fb0bc6ebdf0>],
             'bool24': [<numba.core.ir.Assign object at 0x7fb0bc6e9dc0>],
             'bool42': [<numba.core.ir.Assign object at 0x7fb0bc8f1eb0>],
             'bool50': [<numba.core.ir.Assign object at 0x7fb0bc713d60>],
             'exp': [<numba.core.ir.Assign object at 0x7fb0bc8f10a0>,
                     <numba.core.ir.Assign object at 0x7fb0bc48e910>,
                     <numba.core.ir.Assign object at 0x7fb0bc900a90>],
             'invert': [<numba.core.ir.Assign object at 0x7fb0bc8f17f0>,
                        <numba.core.ir.Assign object at 0x7fb0bc48e790>],
             'r': [<numba.core.ir.Assign object at 0x7fb0bc6e9340>,
                   <numba.core.ir.Assign object at 0x7fb0bc900ee0>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:156] DEBUG SSA violators {'a.1', 'r', 'exp', 'invert'}
Tue, 30 Jan 2024 09:22:50 ssa.py[line:63] DEBUG Fix SSA violator on var a.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:269] DEBUG first assign: a.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:69] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fb0bc6ebe20>],
             154: [<numba.core.ir.Assign object at 0x7fb0bc52c580>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 106 from label 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 0 from label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 138 from label 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 0 from label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 138 from label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:63] DEBUG Fix SSA violator on var r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:269] DEBUG first assign: r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc6eb7f0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:69] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fb0bc6ebac0>],
             146: [<numba.core.ir.Assign object at 0x7fb0bc52c850>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 138 from label 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 0 from label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[106])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 172 from label 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $180binary_true_divide.2 = $const176.0 / r.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc6ebc10>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='r' stmt=$186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 172 from label 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $186return_value.1 = cast(value=r.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:63] DEBUG Fix SSA violator on var exp
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:269] DEBUG first assign: exp
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: exp.1 = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: exp.2 = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc52ca30>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:69] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fb0bc52cbb0>],
             98: [<numba.core.ir.Assign object at 0x7fb0bc52c190>],
             154: [<numba.core.ir.Assign object at 0x7fb0bc5468b0>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.1 = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 26 from label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def exp.1 = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $110compare_op.2 = exp.3 > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def exp.2 = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $134compare_op.2 = exp.4 != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $142binary_and.2 = exp.4 & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 138 from label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.2 = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52c310>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:63] DEBUG Fix SSA violator on var invert
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:269] DEBUG first assign: invert
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: invert.1 = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.1 = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp.3 > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp.4 != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp.4 & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.2 = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc546fa0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:69] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fb0bc6eb310>],
             98: [<numba.core.ir.Assign object at 0x7fb0bc52ca00>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert.1 = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.1 = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp.3 > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp.4 != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp.4 & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.2 = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 106 from label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 26 from label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def invert.1 = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc52b220>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2448)
           2	LOAD_FAST(arg=0, lineno=2453)
           4	LOAD_ATTR(arg=0, lineno=2453)
           6	LOAD_CONST(arg=1, lineno=2453)
           8	BINARY_POWER(arg=None, lineno=2453)
          10	LOAD_FAST(arg=0, lineno=2453)
          12	LOAD_ATTR(arg=1, lineno=2453)
          14	LOAD_CONST(arg=1, lineno=2453)
          16	BINARY_POWER(arg=None, lineno=2453)
          18	BINARY_ADD(arg=None, lineno=2453)
          20	RETURN_VALUE(arg=None, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2448)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$x2.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$4load_attr.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=8, inst=BINARY_POWER(arg=None, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$4load_attr.1', '$const6.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8binary_power.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8binary_power.3', '$x10.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8binary_power.3', '$12load_attr.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=16, inst=BINARY_POWER(arg=None, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8binary_power.3', '$12load_attr.5', '$const14.6']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8binary_power.3', '$16binary_power.7']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=2453)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$18binary_add.8']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8binary_power.3'}), (10, {'res': '$x10.4'}), (12, {'item': '$x10.4', 'res': '$12load_attr.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$12load_attr.5', 'rhs': '$const14.6', 'res': '$16binary_power.7'}), (18, {'lhs': '$8binary_power.3', 'rhs': '$16binary_power.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    $4load_attr.1 = getattr(value=x, attr=real) ['$4load_attr.1', 'x']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8binary_power.3 = $4load_attr.1 ** $const6.2 ['$4load_attr.1', '$8binary_power.3', '$const6.2']
    $12load_attr.5 = getattr(value=x, attr=imag) ['$12load_attr.5', 'x']
    $const14.6 = const(int, 2)               ['$const14.6']
    $16binary_power.7 = $12load_attr.5 ** $const14.6 ['$12load_attr.5', '$16binary_power.7', '$const14.6']
    $18binary_add.8 = $8binary_power.3 + $16binary_power.7 ['$16binary_power.7', '$18binary_add.8', '$8binary_power.3']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcbe2dc0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $4load_attr.1 = getattr(value=x, attr=real)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const6.2 = const(int, 2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $8binary_power.3 = $4load_attr.1 ** $const6.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $12load_attr.5 = getattr(value=x, attr=imag)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const14.6 = const(int, 2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $16binary_power.7 = $12load_attr.5 ** $const14.6
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $18binary_add.8 = $8binary_power.3 + $16binary_power.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $20return_value.9 = cast(value=$18binary_add.8)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $20return_value.9
Tue, 30 Jan 2024 09:22:50 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7fb0bc861580>],
             '$16binary_power.7': [<numba.core.ir.Assign object at 0x7fb0bc861160>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fb0bc861340>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb0bc861b50>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fb0bc45b490>],
             '$8binary_power.3': [<numba.core.ir.Assign object at 0x7fb0bc8617f0>],
             '$const14.6': [<numba.core.ir.Assign object at 0x7fb0bc861250>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7fb0bc861a00>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bcbe22e0>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
          96	JUMP_FORWARD(arg=8, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=237)
         138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	JUMP_ABSOLUTE(arg=130, lineno=241)
>        172	LOAD_FAST(arg=3, lineno=243)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=243)
         176	LOAD_CONST(arg=8, lineno=243)
         178	LOAD_FAST(arg=2, lineno=243)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         182	RETURN_VALUE(arg=None, lineno=243)
>        184	LOAD_FAST(arg=2, lineno=243)
         186	RETURN_VALUE(arg=None, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=214)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$2load_deref.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$2load_deref.0', '$const4.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$6call_function.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$10load_deref.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$10load_deref.3', '$a12.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$14call_function.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$b18.6']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$b18.6', '$const20.7']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=218)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$22compare_op.8']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=26 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$const26.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$b30.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$32unary_negative.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp36.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp36.3', '$const38.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=221)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$40compare_op.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=98 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$const98.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$b102.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=44 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$44load_global.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=48 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=223)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$48load_deref.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=106 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp106.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp106.0', '$const108.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=234)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$110compare_op.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=52 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a52.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a52.0', '$const54.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=224)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$56compare_op.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=114 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$114load_global.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$116load_method.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$116load_method.1', '$a118.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$116load_method.1', '$a118.2', '$120load_global.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$116load_method.1', '$a118.2', '$124call_function.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$126call_method.6']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=130 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp130.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp130.0', '$const132.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=237)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$134compare_op.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=60 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=225)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$60load_deref.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=76 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a76.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a76.0', '$const78.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$80compare_op.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=138 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp138.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp138.0', '$const140.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=238)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$142binary_and.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=172 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$invert172.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=64 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$64load_deref.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=68 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$68load_global.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$68load_global.0', '$const70.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$72call_function.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=84 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a84.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a84.0', '$const86.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$88compare_op.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=146 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$r146.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$r146.0', '$a148.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$150inplace_multiply.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=154 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp154.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$exp154.0', '$const156.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$158inplace_rshift.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a162.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$a162.3', '$a164.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$166inplace_multiply.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=241)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=176 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$const176.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$const176.0', '$r178.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$180binary_true_divide.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=184 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=243)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$r184.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=92 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$const92.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=130 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 interpreter.py[line:1390] DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcdb7160>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7fb0bcc41220>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x7fb0bc7b1fd0>],
             '$112pred': [<numba.core.ir.Assign object at 0x7fb0bc7b15e0>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x7fb0bc7b1520>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x7fb0bc7b1130>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x7fb0bc7b1a90>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x7fb0bca0fcd0>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x7fb0bca0f430>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x7fb0bca0f5b0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x7fb0bca0f3d0>],
             '$136pred': [<numba.core.ir.Assign object at 0x7fb0bca0f340>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x7fb0bcf05df0>],
             '$144pred': [<numba.core.ir.Assign object at 0x7fb0bcf05bb0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x7fb0bcd22100>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x7fb0bcd22be0>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x7fb0bcd22a30>],
             '$174pred': [<numba.core.ir.Assign object at 0x7fb0bcefe2b0>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fb0bcdb7fd0>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x7fb0bcf19160>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x7fb0bcf19040>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x7fb0bcbec8e0>],
             '$24pred': [<numba.core.ir.Assign object at 0x7fb0bcbec8b0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fb0bc89eac0>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x7fb0bcba19a0>],
             '$42pred': [<numba.core.ir.Assign object at 0x7fb0bcba1f70>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fb0bcec6f40>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x7fb0bcec6250>],
             '$50pred': [<numba.core.ir.Assign object at 0x7fb0bceb72e0>],
             '$const108.1': [<numba.core.ir.Assign object at 0x7fb0bc7b1ee0>],
             '$const132.1': [<numba.core.ir.Assign object at 0x7fb0bca0fd30>],
             '$const140.1': [<numba.core.ir.Assign object at 0x7fb0bcf05460>],
             '$const156.1': [<numba.core.ir.Assign object at 0x7fb0bcd224f0>],
             '$const176.0': [<numba.core.ir.Assign object at 0x7fb0bcdb78b0>],
             '$const20.7': [<numba.core.ir.Assign object at 0x7fb0bccdb070>],
             '$const38.4': [<numba.core.ir.Assign object at 0x7fb0bcba1b50>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb0bc5af9a0>],
             'a': [<numba.core.ir.Assign object at 0x7fb0bc89e370>],
             'a.1': [<numba.core.ir.Assign object at 0x7fb0bccdb2b0>,
                     <numba.core.ir.Assign object at 0x7fb0bcefe370>],
             'b': [<numba.core.ir.Assign object at 0x7fb0bc89e190>],
             'bool112': [<numba.core.ir.Assign object at 0x7fb0bc7b16d0>],
             'bool136': [<numba.core.ir.Assign object at 0x7fb0bca0f1c0>],
             'bool144': [<numba.core.ir.Assign object at 0x7fb0bcf052e0>],
             'bool174': [<numba.core.ir.Assign object at 0x7fb0bcefe6d0>],
             'bool24': [<numba.core.ir.Assign object at 0x7fb0bcbecfd0>],
             'bool42': [<numba.core.ir.Assign object at 0x7fb0bcba1100>],
             'bool50': [<numba.core.ir.Assign object at 0x7fb0bcec6040>],
             'exp': [<numba.core.ir.Assign object at 0x7fb0bc77b4f0>,
                     <numba.core.ir.Assign object at 0x7fb0bc7b1e80>,
                     <numba.core.ir.Assign object at 0x7fb0bcd22f10>],
             'invert': [<numba.core.ir.Assign object at 0x7fb0bcbec550>,
                        <numba.core.ir.Assign object at 0x7fb0bcca8eb0>],
             'r': [<numba.core.ir.Assign object at 0x7fb0bcc41c70>,
                   <numba.core.ir.Assign object at 0x7fb0bcd22b80>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:156] DEBUG SSA violators {'a.1', 'r', 'exp', 'invert'}
Tue, 30 Jan 2024 09:22:50 ssa.py[line:63] DEBUG Fix SSA violator on var a.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:269] DEBUG first assign: a.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:69] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fb0bcf197c0>],
             154: [<numba.core.ir.Assign object at 0x7fb0bcc7bc10>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 106 from label 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 0 from label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 138 from label 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 0 from label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 138 from label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:63] DEBUG Fix SSA violator on var r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:269] DEBUG first assign: r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc7b790>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:69] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fb0bcc7b5b0>],
             146: [<numba.core.ir.Assign object at 0x7fb0bc861e20>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 138 from label 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 0 from label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[106])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 172 from label 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $180binary_true_divide.2 = $const176.0 / r.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bc861040>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='r' stmt=$186return_value.1 = cast(value=r)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 172 from label 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $186return_value.1 = cast(value=r.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:63] DEBUG Fix SSA violator on var exp
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:269] DEBUG first assign: exp
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: exp.1 = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: exp.2 = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc365b0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:69] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fb0bcc36040>],
             98: [<numba.core.ir.Assign object at 0x7fb0bcc7b2e0>],
             154: [<numba.core.ir.Assign object at 0x7fb0bcc0bb80>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.1 = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 26 from label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def exp.1 = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $110compare_op.2 = exp.3 > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def exp.2 = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $134compare_op.2 = exp.4 != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $142binary_and.2 = exp.4 & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 138 from label 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.2 = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bcc7b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:63] DEBUG Fix SSA violator on var invert
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:269] DEBUG first assign: invert
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: invert.1 = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.1 = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp.3 > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp.4 != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp.4 & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.2 = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fb0bcc0b400>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:69] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fb0bcc7beb0>],
             98: [<numba.core.ir.Assign object at 0x7fb0bcc7b190>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a = arg(0, name=a)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: b = arg(1, name=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const4.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const20.7 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22compare_op.8 = b < $const20.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $24pred, 26, 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const38.4 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $42pred, 44, 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 44
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: <static> raise <class 'OverflowError'>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: invert.1 = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.1 = b
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const108.1 = const(int, 65536)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $110compare_op.2 = exp.3 > $const108.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $112pred, 114, 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 114
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $128return_value.7
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const132.1 = const(int, 0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $134compare_op.2 = exp.4 != $const132.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $136pred, 138, 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 138
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const140.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $142binary_and.2 = exp.4 & $const140.1
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $144pred, 146, 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 146
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.1 = $150inplace_multiply.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 154
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const156.1 = const(int, 1)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: exp.2 = $158inplace_rshift.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: a.1.1 = $166inplace_multiply.5
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: jump 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:353] DEBUG find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 130 from label 172
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 106 from label 130
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:401] DEBUG insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:384] DEBUG find_def_from_top label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:421] DEBUG idom 26 from label 48
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 26
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def invert = const(bool, True)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:427] DEBUG find_def_from_bottom label 98
Tue, 30 Jan 2024 09:22:50 ssa.py[line:409] DEBUG incoming_def invert.1 = const(bool, False)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:199] DEBUG replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: branch $174pred, 176, 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 176
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const176.0 = const(float, 1.0)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $182return_value.3
Tue, 30 Jan 2024 09:22:50 ssa.py[line:170] DEBUG ==== SSA block rewrite pass on 184
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fb0bce9d970>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $186return_value.1 = cast(value=r.2)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $186return_value.1
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2500)
           2	LOAD_GLOBAL(arg=0, lineno=2504)
           4	LOAD_METHOD(arg=1, lineno=2504)
           6	LOAD_FAST(arg=0, lineno=2504)
           8	CALL_METHOD(arg=1, lineno=2504)
          10	LOAD_CONST(arg=1, lineno=2504)
          12	LOAD_GLOBAL(arg=0, lineno=2504)
          14	LOAD_METHOD(arg=2, lineno=2504)
          16	LOAD_FAST(arg=0, lineno=2504)
          18	CALL_METHOD(arg=1, lineno=2504)
          20	BINARY_MULTIPLY(arg=None, lineno=2504)
          22	BINARY_ADD(arg=None, lineno=2504)
          24	RETURN_VALUE(arg=None, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2500)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$4load_method.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$4load_method.1', '$x6.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$const10.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_METHOD(arg=2, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$const10.4', '$12load_global.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$const10.4', '$14load_method.6']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=18, inst=CALL_METHOD(arg=1, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$const10.4', '$14load_method.6', '$x16.7']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$const10.4', '$18call_method.8']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=22, inst=BINARY_ADD(arg=None, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$20binary_multiply.9']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$22binary_add.10']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'func': '$4load_method.1', 'args': ['$x6.2'], 'res': '$8call_method.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$12load_global.5'}), (14, {'item': '$12load_global.5', 'res': '$14load_method.6'}), (16, {'res': '$x16.7'}), (18, {'func': '$14load_method.6', 'args': ['$x16.7'], 'res': '$18call_method.8'}), (20, {'lhs': '$const10.4', 'rhs': '$18call_method.8', 'res': '$20binary_multiply.9'}), (22, {'lhs': '$8call_method.3', 'rhs': '$20binary_multiply.9', 'res': '$22binary_add.10'}), (24, {'retval': '$22binary_add.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=cos) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2500)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'x']
    $const10.4 = const(complex, 1j)          ['$const10.4']
    $12load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$12load_global.5']
    $14load_method.6 = getattr(value=$12load_global.5, attr=sin) ['$12load_global.5', '$14load_method.6']
    $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2500)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_method.6', '$18call_method.8', 'x']
    $20binary_multiply.9 = $const10.4 * $18call_method.8 ['$18call_method.8', '$20binary_multiply.9', '$const10.4']
    $22binary_add.10 = $8call_method.3 + $20binary_multiply.9 ['$20binary_multiply.9', '$22binary_add.10', '$8call_method.3']
    $24return_value.11 = cast(value=$22binary_add.10) ['$22binary_add.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bcf00910>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=cos)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2500)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(complex, 1j)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $12load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $14load_method.6 = getattr(value=$12load_global.5, attr=sin)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2500)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $20binary_multiply.9 = $const10.4 * $18call_method.8
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22binary_add.10 = $8call_method.3 + $20binary_multiply.9
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24return_value.11 = cast(value=$22binary_add.10)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $24return_value.11
Tue, 30 Jan 2024 09:22:50 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$12load_global.5': [<numba.core.ir.Assign object at 0x7fb0bcc5d760>],
             '$14load_method.6': [<numba.core.ir.Assign object at 0x7fb0bcc5d490>],
             '$18call_method.8': [<numba.core.ir.Assign object at 0x7fb0bcc5d0a0>],
             '$20binary_multiply.9': [<numba.core.ir.Assign object at 0x7fb0bcc5dfd0>],
             '$22binary_add.10': [<numba.core.ir.Assign object at 0x7fb0bc39bd60>],
             '$24return_value.11': [<numba.core.ir.Assign object at 0x7fb0bc39b1f0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bcc5ddc0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fb0bcc5dee0>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x7fb0bcc5da30>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bcc5d610>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bc827100>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:76] DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2500)
           2	LOAD_GLOBAL(arg=0, lineno=2504)
           4	LOAD_METHOD(arg=1, lineno=2504)
           6	LOAD_FAST(arg=0, lineno=2504)
           8	CALL_METHOD(arg=1, lineno=2504)
          10	LOAD_CONST(arg=1, lineno=2504)
          12	LOAD_GLOBAL(arg=0, lineno=2504)
          14	LOAD_METHOD(arg=2, lineno=2504)
          16	LOAD_FAST(arg=0, lineno=2504)
          18	CALL_METHOD(arg=1, lineno=2504)
          20	BINARY_MULTIPLY(arg=None, lineno=2504)
          22	BINARY_ADD(arg=None, lineno=2504)
          24	RETURN_VALUE(arg=None, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:102] DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:105] DEBUG stack: []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:106] DEBUG state.pc_initial: State(pc_initial=0 nstack_initial=0)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2500)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack []
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$2load_global.0']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$4load_method.1']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$4load_method.1', '$x6.2']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$const10.4']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=14, inst=LOAD_METHOD(arg=2, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$const10.4', '$12load_global.5']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$const10.4', '$14load_method.6']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=18, inst=CALL_METHOD(arg=1, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$const10.4', '$14load_method.6', '$x16.7']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$const10.4', '$18call_method.8']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=22, inst=BINARY_ADD(arg=None, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$8call_method.3', '$20binary_multiply.9']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:333] DEBUG dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=2504)
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:334] DEBUG stack ['$22binary_add.10']
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:124] DEBUG end state. edges=[]
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:205] DEBUG -------------------------Prune PHIs-------------------------
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:274] DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:231] DEBUG defmap: {}
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:232] DEBUG phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:253] DEBUG changing phismap: defaultdict(<class 'set'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:262] DEBUG keep phismap: {}
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:268] DEBUG new_out: defaultdict(<class 'dict'>, {})
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:278] DEBUG ----------------------DONE Prune PHIs-----------------------
Tue, 30 Jan 2024 09:22:50 byteflow.py[line:136] DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'func': '$4load_method.1', 'args': ['$x6.2'], 'res': '$8call_method.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$12load_global.5'}), (14, {'item': '$12load_global.5', 'res': '$14load_method.6'}), (16, {'res': '$x16.7'}), (18, {'func': '$14load_method.6', 'args': ['$x16.7'], 'res': '$18call_method.8'}), (20, {'lhs': '$const10.4', 'rhs': '$18call_method.8', 'res': '$20binary_multiply.9'}), (22, {'lhs': '$8call_method.3', 'rhs': '$20binary_multiply.9', 'res': '$22binary_add.10'}), (24, {'retval': '$22binary_add.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Tue, 30 Jan 2024 09:22:50 interpreter.py[line:1390] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=cos) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2500)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'x']
    $const10.4 = const(complex, 1j)          ['$const10.4']
    $12load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>) ['$12load_global.5']
    $14load_method.6 = getattr(value=$12load_global.5, attr=sin) ['$12load_global.5', '$14load_method.6']
    $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2500)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_method.6', '$18call_method.8', 'x']
    $20binary_multiply.9 = $const10.4 * $18call_method.8 ['$18call_method.8', '$20binary_multiply.9', '$const10.4']
    $22binary_add.10 = $8call_method.3 + $20binary_multiply.9 ['$20binary_multiply.9', '$22binary_add.10', '$8call_method.3']
    $24return_value.11 = cast(value=$22binary_add.10) ['$22binary_add.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

Tue, 30 Jan 2024 09:22:50 ssa.py[line:162] DEBUG ==== SSA block analysis pass on 0
Tue, 30 Jan 2024 09:22:50 ssa.py[line:191] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fb0bccc0be0>
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: x = arg(0, name=x)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=cos)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2500)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $const10.4 = const(complex, 1j)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $12load_global.5 = global(np: <module 'numpy' from '/home/caitlin/.local/lib/python3.8/site-packages/numpy/__init__.py'>)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $14load_method.6 = getattr(value=$12load_global.5, attr=sin)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2500)], kws=(), vararg=None, varkwarg=None, target=None)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $20binary_multiply.9 = $const10.4 * $18call_method.8
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $22binary_add.10 = $8call_method.3 + $20binary_multiply.9
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: $24return_value.11 = cast(value=$22binary_add.10)
Tue, 30 Jan 2024 09:22:50 ssa.py[line:193] DEBUG on stmt: return $24return_value.11
Tue, 30 Jan 2024 09:22:50 ssa.py[line:154] DEBUG defs defaultdict(<class 'list'>,
            {'$12load_global.5': [<numba.core.ir.Assign object at 0x7fb0bccb9ac0>],
             '$14load_method.6': [<numba.core.ir.Assign object at 0x7fb0bccb94f0>],
             '$18call_method.8': [<numba.core.ir.Assign object at 0x7fb0bc39bd00>],
             '$20binary_multiply.9': [<numba.core.ir.Assign object at 0x7fb0bc39b940>],
             '$22binary_add.10': [<numba.core.ir.Assign object at 0x7fb0bc39bbe0>],
             '$24return_value.11': [<numba.core.ir.Assign object at 0x7fb0bccc0820>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb0bcccf6d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fb0bcccf400>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x7fb0bcccfe50>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fb0bccb9b50>],
             'x': [<numba.core.ir.Assign object at 0x7fb0bccb50d0>]})
Tue, 30 Jan 2024 09:22:50 ssa.py[line:156] DEBUG SSA violators set()
Tue, 30 Jan 2024 09:22:51 main.py[line:83] INFO Load pretrained model from /home/caitlin/blaw_ws/src/panns_transfer_to_gtzan/workspace/Cnn14_16k_mAP=0.438.pth
